diff -ur opencv-3.1.0/modules/core/src/glob.cpp opencv_src/modules/core/src/glob.cpp
--- opencv-3.1.0/modules/core/src/glob.cpp	2015-12-18 17:02:16.000000000 +0200
+++ opencv_src/modules/core/src/glob.cpp	2018-07-08 21:01:00.606282000 +0300
@@ -73,101 +73,18 @@
 #endif
     };
 
-    DIR* opendir(const char* path)
-    {
-        DIR* dir = new DIR;
-        dir->ent.d_name = 0;
-#ifdef WINRT
-        cv::String full_path = cv::String(path) + "\\*";
-        wchar_t wfull_path[MAX_PATH];
-        size_t copied = mbstowcs(wfull_path, full_path.c_str(), MAX_PATH);
-        CV_Assert((copied != MAX_PATH) && (copied != (size_t)-1));
-        dir->handle = ::FindFirstFileExW(wfull_path, FindExInfoStandard,
-                        &dir->data, FindExSearchNameMatch, NULL, 0);
-#else
-        dir->handle = ::FindFirstFileExA((cv::String(path) + "\\*").c_str(),
-            FindExInfoStandard, &dir->data, FindExSearchNameMatch, NULL, 0);
-#endif
-        if(dir->handle == INVALID_HANDLE_VALUE)
-        {
-            /*closedir will do all cleanup*/
-            delete dir;
-            return 0;
-        }
-        return dir;
-    }
-
-    dirent* readdir(DIR* dir)
-    {
-#ifdef WINRT
-        if (dir->ent.d_name != 0)
-        {
-            if (::FindNextFileW(dir->handle, &dir->data) != TRUE)
-                return 0;
-        }
-        size_t asize = wcstombs(NULL, dir->data.cFileName, 0);
-        CV_Assert((asize != 0) && (asize != (size_t)-1));
-        char* aname = new char[asize+1];
-        aname[asize] = 0;
-        wcstombs(aname, dir->data.cFileName, asize);
-        dir->ent.d_name = aname;
-#else
-        if (dir->ent.d_name != 0)
-        {
-            if (::FindNextFileA(dir->handle, &dir->data) != TRUE)
-                return 0;
-        }
-        dir->ent.d_name = dir->data.cFileName;
-#endif
-        return &dir->ent;
-    }
 
-    void closedir(DIR* dir)
-    {
-        ::FindClose(dir->handle);
-        delete dir;
-    }
 
 
 }
 #else
-# include <dirent.h>
+//# include <dirent.h>
 # include <sys/stat.h>
 const char dir_separators[] = "/";
 const char native_separator = '/';
 #endif
 
-static bool isDir(const cv::String& path, DIR* dir)
-{
-#if defined WIN32 || defined _WIN32 || defined WINCE
-    DWORD attributes;
-    BOOL status = TRUE;
-    if (dir)
-        attributes = dir->data.dwFileAttributes;
-    else
-    {
-        WIN32_FILE_ATTRIBUTE_DATA all_attrs;
-#ifdef WINRT
-        wchar_t wpath[MAX_PATH];
-        size_t copied = mbstowcs(wpath, path.c_str(), MAX_PATH);
-        CV_Assert((copied != MAX_PATH) && (copied != (size_t)-1));
-        status = ::GetFileAttributesExW(wpath, GetFileExInfoStandard, &all_attrs);
-#else
-        status = ::GetFileAttributesExA(path.c_str(), GetFileExInfoStandard, &all_attrs);
-#endif
-        attributes = all_attrs.dwFileAttributes;
-    }
 
-    return status && ((attributes & FILE_ATTRIBUTE_DIRECTORY) != 0);
-#else
-    (void)dir;
-    struct stat stat_buf;
-    if (0 != stat( path.c_str(), &stat_buf))
-        return false;
-    int is_dir = S_ISDIR( stat_buf.st_mode);
-    return is_dir != 0;
-#endif
-}
 
 static bool wildcmp(const char *string, const char *wild)
 {
@@ -219,75 +136,10 @@
 
 static void glob_rec(const cv::String& directory, const cv::String& wildchart, std::vector<cv::String>& result, bool recursive)
 {
-    DIR *dir;
-    struct dirent *ent;
 
-    if ((dir = opendir (directory.c_str())) != 0)
-    {
-        /* find all the files and directories within directory */
-        try
-        {
-            while ((ent = readdir (dir)) != 0)
-            {
-                const char* name = ent->d_name;
-                if((name[0] == 0) || (name[0] == '.' && name[1] == 0) || (name[0] == '.' && name[1] == '.' && name[2] == 0))
-                    continue;
-
-                cv::String path = directory + native_separator + name;
-
-                if (isDir(path, dir))
-                {
-                    if (recursive)
-                        glob_rec(path, wildchart, result, recursive);
-                }
-                else
-                {
-                    if (wildchart.empty() || wildcmp(name, wildchart.c_str()))
-                        result.push_back(path);
-                }
-            }
-        }
-        catch (...)
-        {
-            closedir(dir);
-            throw;
-        }
-        closedir(dir);
-    }
-    else CV_Error(CV_StsObjectNotFound, cv::format("could not open directory: %s", directory.c_str()));
 }
 
 void cv::glob(String pattern, std::vector<String>& result, bool recursive)
 {
-    result.clear();
-    String path, wildchart;
-
-    if (isDir(pattern, 0))
-    {
-        if(strchr(dir_separators, pattern[pattern.size() - 1]) != 0)
-        {
-            path = pattern.substr(0, pattern.size() - 1);
-        }
-        else
-        {
-            path = pattern;
-        }
-    }
-    else
-    {
-        size_t pos = pattern.find_last_of(dir_separators);
-        if (pos == String::npos)
-        {
-            wildchart = pattern;
-            path = ".";
-        }
-        else
-        {
-            path = pattern.substr(0, pos);
-            wildchart = pattern.substr(pos + 1);
-        }
-    }
 
-    glob_rec(path, wildchart, result, recursive);
-    std::sort(result.begin(), result.end());
 }
diff -ur opencv-3.1.0/modules/core/src/system.cpp opencv_src/modules/core/src/system.cpp
--- opencv-3.1.0/modules/core/src/system.cpp	2015-12-18 17:02:16.000000000 +0200
+++ opencv_src/modules/core/src/system.cpp	2018-07-08 21:01:00.607284000 +0300
@@ -866,21 +866,16 @@
 {
     Impl()
     {
-        pthread_mutexattr_t attr;
-        pthread_mutexattr_init(&attr);
-        pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
-        pthread_mutex_init(&mt, &attr);
-        pthread_mutexattr_destroy(&attr);
-
+        
         refcount = 1;
     }
-    ~Impl() { pthread_mutex_destroy(&mt); }
+    ~Impl() {  }
 
-    void lock() { pthread_mutex_lock(&mt); }
-    bool trylock() { return pthread_mutex_trylock(&mt) == 0; }
-    void unlock() { pthread_mutex_unlock(&mt); }
+    void lock() {  }
+    bool trylock() { return true; }
+    void unlock() {  }
 
-    pthread_mutex_t mt;
+    
     int refcount;
 };
 
@@ -944,7 +939,7 @@
     DWORD tlsKey;
 #endif
 #else // WIN32
-    pthread_key_t  tlsKey;
+    
 #endif
 };
 
@@ -983,19 +978,19 @@
 #else // WIN32
 TlsAbstraction::TlsAbstraction()
 {
-    CV_Assert(pthread_key_create(&tlsKey, NULL) == 0);
+    
 }
 TlsAbstraction::~TlsAbstraction()
 {
-    CV_Assert(pthread_key_delete(tlsKey) == 0);
+    
 }
 void* TlsAbstraction::GetData() const
 {
-    return pthread_getspecific(tlsKey);
+    return NULL;
 }
 void  TlsAbstraction::SetData(void *pData)
 {
-    CV_Assert(pthread_setspecific(tlsKey, pData) == 0);
+    
 }
 #endif
 
diff -ur opencv-3.1.0/modules/objdetect/src/detection_based_tracker.cpp opencv_src/modules/objdetect/src/detection_based_tracker.cpp
--- opencv-3.1.0/modules/objdetect/src/detection_based_tracker.cpp	2015-12-18 17:02:16.000000000 +0200
+++ opencv_src/modules/objdetect/src/detection_based_tracker.cpp	2018-07-08 21:01:00.609283000 +0300
@@ -43,9 +43,10 @@
 
 #include "precomp.hpp"
 
-#if (defined(__cplusplus) &&  __cplusplus > 199711L) || (defined(_MSC_VER) && _MSC_VER >= 1700)
-#define USE_STD_THREADS
-#endif
+// no support for USE_STD_THREADS in newlib
+// #if (defined(__cplusplus) &&  __cplusplus > 199711L) || (defined(_MSC_VER) && _MSC_VER >= 1700)
+// #define USE_STD_THREADS
+// #endif
 
 #if defined(__linux__) || defined(LINUX) || defined(__APPLE__) || defined(ANDROID) || defined(USE_STD_THREADS)
 
