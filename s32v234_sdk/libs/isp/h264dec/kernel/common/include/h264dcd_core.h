/*
 * Copyright (c) 2014-2016 Freescale Semiconductor
 * Copyright 2017 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef H264DCDCORE_H
#define H264DCDCORE_H

typedef struct {
  uint32_t      MCR;         /* MODULE CONFIGURATION REGISTER */
  uint32_t      TIMEOUT_CFG; /* TIMEOUT CONFIGURATION REGISTER */
  uint8_t       H264_DEC_reserved0[8];
  uint32_t      STR_VCR[4];  /* STREAM VIDEO CONFIGURATION REGISTER */
  uint8_t       H264_DEC_reserved1[16];
  uint32_t      STR_PKT_ADDR; /* STREAM PACKET ADDRESS REGISTER */
  uint32_t      STR_TRIG_PKT_CFG;  /* STREAM TRIGGER AND PACKET CONFIGURATION REGISTER */
  uint32_t      STR_PKT_FIFO_WMRK; /* STREAM PACKET FIFO WATERMARK REGISTER */
  uint8_t       H264_DEC_reserved2[4];
  uint32_t      STR_01_PKT_FIFO_STAT; /* STREAM 0 and 1 PACKET FIFO STATUS REGISTER */
  uint32_t      STR_23_PKT_FIFO_STAT; /* STREAM 2 and 3 PACKET FIFO STATUS REGISTER */
  uint8_t       H264_DEC_reserved3[8];
  uint32_t      STR_0_PKT_STATUS[16]; /* STREAM 0 PACKET STATUS REGISTER */
  uint8_t       H264_DEC_reserved4[64];
  uint32_t      STR_1_PKT_STATUS[16]; /* STREAM 1 PACKET STATUS REGISTER */
  uint8_t       H264_DEC_reserved5[64];
  uint32_t      STR_2_PKT_STATUS[16]; /* STREAM 2 PACKET STATUS REGISTER */
  uint8_t       H264_DEC_reserved6[64];
  uint32_t      STR_3_PKT_STATUS[16]; /* STREAM 3 PACKET STATUS REGISTER */
  uint8_t       H264_DEC_reserved7[240];
  uint32_t      VO_STR0_Y_ADDR;  /* VIDEO OUTPUT STREAM LUMA ADDRESS REGISTER */
  uint32_t      VO_STR0_CB_ADDR; /* VIDEO OUTPUT STREAM Cb ADDRESS REGISTER */
  uint32_t      VO_STR0_CR_ADDR; /* VIDEO OUTPUT STREAM Cr ADDRESS REGISTER */
  uint32_t      VO_STR0_NRLINES; /* VIDEO OUTPUT STREAM NUMBER OF LINES REGISTER */
  uint32_t      VO_STR1_Y_ADDR;  /* VIDEO OUTPUT STREAM LUMA ADDRESS REGISTER */
  uint32_t      VO_STR1_CB_ADDR; /* VIDEO OUTPUT STREAM Cb ADDRESS REGISTER */
  uint32_t      VO_STR1_CR_ADDR; /* VIDEO OUTPUT STREAM Cr ADDRESS REGISTER */
  uint32_t      VO_STR1_NRLINES; /* VIDEO OUTPUT STREAM NUMBER OF LINES REGISTER */
  uint32_t      VO_STR2_Y_ADDR;  /* VIDEO OUTPUT STREAM LUMA ADDRESS REGISTER */
  uint32_t      VO_STR2_CB_ADDR; /* VIDEO OUTPUT STREAM Cb ADDRESS REGISTER */
  uint32_t      VO_STR2_CR_ADDR; /* VIDEO OUTPUT STREAM Cr ADDRESS REGISTER */
  uint32_t      VO_STR2_NRLINES; /* VIDEO OUTPUT STREAM NUMBER OF LINES REGISTER */
  uint32_t      VO_STR3_Y_ADDR;  /* VIDEO OUTPUT STREAM LUMA ADDRESS REGISTER */
  uint32_t      VO_STR3_CB_ADDR; /* VIDEO OUTPUT STREAM Cb ADDRESS REGISTER */
  uint32_t      VO_STR3_CR_ADDR; /* VIDEO OUTPUT STREAM Cr ADDRESS REGISTER */
  uint32_t      VO_STR3_NRLINES; /* VIDEO OUTPUT STREAM NUMBER OF LINES REGISTER */
  uint8_t       H264_DEC_reserved8[32];
  uint32_t      RATE_FLOW_CNTRL; /* RATE FLOW CONTROL REGISTER */
  uint8_t       H264_DEC_reserved9[28];
  uint32_t      LINE_CNT_STAT;   /* LINE COUNT STATUS REGISTER */
  uint32_t      STAT;            /* STATUS REGISTER */
  uint8_t       H264_DEC_reserved10[88];
  uint32_t      ISR;             /* INTERRUPT STATUS REGISTER */
  uint32_t      IER;             /* INTERRUPT ENABLE REGISTER */
  uint8_t       H264_DEC_reserved11[24];
  uint32_t      TESTLINE_CFG;    /* TESTLINE CONFIGURATION REGISTER */
  uint32_t      TESTLINE_PXL_LOC; /* TESTLINE PIXEL LOCATION REGISTER */
  uint8_t       H264_DEC_reserved12[8];
  uint32_t      TESTLINE_STR0_LUMA_VAL; /* TESTLINE STREAM LUMA PIXEL VALUE */
  uint32_t      TESTLINE_STR0_CB_VAL;   /* TESTLINE STREAM Cb PIXEL VALUE REGISTER */
  uint32_t      TESTLINE_STR0_CR_VAL;   /* TESTLINE STREAM Cr PIXEL VALUE REGISTER */
  uint8_t       H264_DEC_reserved13[4];
  uint32_t      TESTLINE_STR1_LUMA_VAL; /* TESTLINE STREAM LUMA PIXEL VALUE */
  uint32_t      TESTLINE_STR1_CB_VAL;   /* TESTLINE STREAM Cb PIXEL VALUE REGISTER */
  uint32_t      TESTLINE_STR1_CR_VAL;   /* TESTLINE STREAM Cr PIXEL VALUE REGISTER */
  uint8_t       H264_DEC_reserved14[4];
  uint32_t      TESTLINE_STR2_LUMA_VAL; /* TESTLINE STREAM LUMA PIXEL VALUE */
  uint32_t      TESTLINE_STR2_CB_VAL;   /* TESTLINE STREAM Cb PIXEL VALUE REGISTER */
  uint32_t      TESTLINE_STR2_CR_VAL;   /* TESTLINE STREAM Cr PIXEL VALUE REGISTER */
  uint8_t       H264_DEC_reserved15[4];
  uint32_t      TESTLINE_STR3_LUMA_VAL; /* TESTLINE STREAM LUMA PIXEL VALUE */
  uint32_t      TESTLINE_STR3_CB_VAL;   /* TESTLINE STREAM Cb PIXEL VALUE REGISTER */
  uint32_t      TESTLINE_STR3_CR_VAL;   /* TESTLINE STREAM Cr PIXEL VALUE REGISTER */
  uint8_t       H264_DEC_reserved16[180];
  uint32_t      ELLVC_CFG;              /* ELLVC CONFIGURATION REGISTER */
  uint8_t       H264_DEC_reserved17[12];
  uint32_t      ELLVC_REF_ADDR_CH[4];   /* ELLVC REFERENCE ADDRESS CHANNEL REGISTER */
  uint8_t       H264_DEC_reserved18[16];
  uint32_t      ELLVC_DBG_FRAME_CYC_CNT_THR[3]; /* ELLVC DEBUG FRAME CYCLE COUNTER THRESHOLD REGISTER */
  uint8_t       H264_DEC_reserved19[36];
  uint32_t      ELLVC_STATE;            /* ELLVC STATE REGISTER */
  uint32_t      ELLVC_PIC_BIT;          /* ELLVC PIC BIT REGISTER */
  uint32_t      ELLVC_PIC_WIDTH_IN_MBS; /* ELLVC PIC WIDTH IN MBS REGISTER */
  uint32_t      ELLVC_PIC_HEIGHT_IN_MBS; /* ELLVC PIC HEIGHT IN MBS REGISTER */
  uint32_t      ELLVC_PIC_CROP_LEFT_CH_01; /* ELLVC PIC CROP LEFT CHANNEL 0, 1 REGISTER */
  uint32_t      ELLVC_PIC_CROP_LEFT_CH_23; /* ELLVC PIC CROP LEFT CHANNEL 2, 3 REGISTER */
  uint32_t      ELLVC_PIC_CROP_RGHT_CH_01; /* ELLVC PIC CROP RIGHT CHANNEL 0, 1 REGISTER */
  uint32_t      ELLVC_PIC_CROP_RGHT_CH_23; /* ELLVC PIC CROP RIGHT CHANNEL 2, 3 REGISTER */
  uint32_t      ELLVC_PIC_CROP_TOP_CH_01;  /* ELLVC PIC CROP TOP CHANNEL 0, 1 REGISTER */
  uint32_t      ELLVC_PIC_CROP_TOP_CH_23;  /* ELLVC PIC CROP TOP CHANNEL 2, 3 REGISTER */
  uint32_t      ELLVC_PIC_CROP_BTTM_CH_01; /* ELLVC PIC CROP BOTTOM CHANNEL 0, 1 REGISTER */
  uint32_t      ELLVC_PIC_CROP_BTTM_CH_23; /* ELLVC PIC CROP BOTTOM CHANNEL 2, 3 REGISTER */
  uint32_t      ELLVC_PIC_PARAM_VLD; /* ELLVC PIC PARAM VALID REGISTER */
  uint32_t      ELLVC_POC_VALUE;     /* ELLVC PICTURE ORDER COUNT VALUE REGISTER */
  uint32_t      ELLVC_STAT;          /* ELLVC STATUS REGISTER */
} H264DCD_REGS;


/************************************************
    H264DCD Register Masks
*************************************************/
/*   MODULE CONFIGURATION REGISTER  */
#define H264DCD_FIFO3_FLUSH_SHIFT       (31U)
#define H264DCD_FIFO3_FLUSH_MASK        ((uint32_t)(0x00000001) << (H264DCD_FIFO3_FLUSH_SHIFT))
#define H264DCD_FIFO2_FLUSH_SHIFT       (30U)
#define H264DCD_FIFO2_FLUSH_MASK        ((uint32_t)(0x00000001) << (H264DCD_FIFO2_FLUSH_SHIFT))
#define H264DCD_FIFO1_FLUSH_SHIFT       (29U)
#define H264DCD_FIFO1_FLUSH_MASK        ((uint32_t)(0x00000001) << (H264DCD_FIFO1_FLUSH_SHIFT))
#define H264DCD_FIFO0_FLUSH_SHIFT       (28U)
#define H264DCD_FIFO0_FLUSH_MASK        ((uint32_t)(0x00000001) << (H264DCD_FIFO0_FLUSH_SHIFT))
#define H264DCD_CHROMA_DATAMODE_SHIFT   (24U)
#define H264DCD_CHROMA_DATAMODE_MASK    ((uint32_t)(0x00000001) << (H264DCD_CHROMA_DATAMODE_SHIFT))
#define H264DCD_OUT3_COLFORMAT_SHIFT    (23U)
#define H264DCD_OUT3_COLFORMAT_MASK     ((uint32_t)(0x00000001) << (H264DCD_OUT3_COLFORMAT_SHIFT))
#define H264DCD_OUT2_COLFORMAT_SHIFT    (22U)
#define H264DCD_OUT2_COLFORMAT_MASK     ((uint32_t)(0x00000001) << (H264DCD_OUT2_COLFORMAT_SHIFT))
#define H264DCD_OUT1_COLFORMAT_SHIFT    (21U)
#define H264DCD_OUT1_COLFORMAT_MASK     ((uint32_t)(0x00000001) << (H264DCD_OUT1_COLFORMAT_SHIFT))
#define H264DCD_OUT0_COLFORMAT_SHIFT    (20U)
#define H264DCD_OUT0_COLFORMAT_MASK     ((uint32_t)(0x00000001) << (H264DCD_OUT0_COLFORMAT_SHIFT))
#define H264DCD_DATAFLOW_MODE_SHIFT     (16U)
#define H264DCD_DATAFLOW_MODE_MASK      ((uint32_t)(0x00000003) << (H264DCD_DATAFLOW_MODE_SHIFT))
#define H264DCD_OUT3_BITWIDTH_SHIFT     (11U)
#define H264DCD_OUT3_BITWIDTH_MASK      ((uint32_t)(0x00000001) << (H264DCD_OUT3_BITWIDTH_SHIFT))
#define H264DCD_OUT2_BITWIDTH_SHIFT     (10U)
#define H264DCD_OUT2_BITWIDTH_MASK      ((uint32_t)(0x00000001) << (H264DCD_OUT2_BITWIDTH_SHIFT))
#define H264DCD_OUT1_BITWIDTH_SHIFT     (9U)
#define H264DCD_OUT1_BITWIDTH_MASK      ((uint32_t)(0x00000001) << (H264DCD_OUT1_BITWIDTH_SHIFT))
#define H264DCD_OUT0_BITWIDTH_SHIFT     (8U)
#define H264DCD_OUT0_BITWIDTH_MASK      ((uint32_t)(0x00000001) << (H264DCD_OUT0_BITWIDTH_SHIFT))
#define H264DCD_OUT3_BUFFRST_SHIFT      (4U)
#define H264DCD_OUT3_BUFFRST_MASK       ((uint32_t)(0x00000001) << (H264DCD_OUT3_BUFFRST_SHIFT))
#define H264DCD_OUT2_BUFFRST_SHIFT      (3U)
#define H264DCD_OUT2_BUFFRST_MASK       ((uint32_t)(0x00000001) << (H264DCD_OUT2_BUFFRST_SHIFT))
#define H264DCD_OUT1_BUFFRST_SHIFT      (2U)
#define H264DCD_OUT1_BUFFRST_MASK       ((uint32_t)(0x00000001) << (H264DCD_OUT1_BUFFRST_SHIFT))
#define H264DCD_OUT0_BUFFRST_SHIFT      (1U)
#define H264DCD_OUT0_BUFFRST_MASK       ((uint32_t)(0x00000001) << (H264DCD_OUT0_BUFFRST_SHIFT))
#define H264DCD_SW_RESET_SHIFT          (0U)
#define H264DCD_SW_RESET_MASK           ((uint32_t)(0x00000001) << (H264DCD_SW_RESET_SHIFT))

/*  TIMEOUT CONFIGURATION REGISTER  */
#define H264DCD_TIMEOUT_EN_STR3_SHIFT       (31U)
#define H264DCD_TIMEOUT_EN_STR3_MASK        ((uint32_t)(0x00000001) << (H264DCD_TIMEOUT_EN_STR3_SHIFT))
#define H264DCD_TIMEOUT_EN_STR2_SHIFT       (30U)
#define H264DCD_TIMEOUT_EN_STR2_MASK        ((uint32_t)(0x00000001) << (H264DCD_TIMEOUT_EN_STR2_SHIFT))
#define H264DCD_TIMEOUT_EN_STR1_SHIFT       (29U)
#define H264DCD_TIMEOUT_EN_STR1_MASK        ((uint32_t)(0x00000001) << (H264DCD_TIMEOUT_EN_STR1_SHIFT))
#define H264DCD_TIMEOUT_EN_STR0_SHIFT       (28U)
#define H264DCD_TIMEOUT_EN_STR0_MASK        ((uint32_t)(0x00000001) << (H264DCD_TIMEOUT_EN_STR0_SHIFT))
#define H264DCD_TIMEOUT_SHIFT               (0U)
#define H264DCD_TIMEOUT_MASK                ((uint32_t)(0x0000FFFF) << (H264DCD_TIMEOUT_SHIFT))

/*  STREAM VIDEO CONFIGURATION REGISTERS  */
#define H264DCD_FRAME_HEIGHT_SHIFT          (20U)
#define H264DCD_FRAME_WIDTH_SHIFT           (4U)


/*  STREAM PACKET ADDRESS REGISTER  */
#define H264DCD_PKT_ADDRESS_SHIFT           (0U)
#define H264DCD_PKT_ADDRESS_MASK            ((uint32_t)(uint32_t)(0x003FFFFF) << (H264DCD_PKT_ADDRESS_SHIFT))

/*  STREAM PACKET CONFIGURATION REGISTER  */
#define H264DCD_STREAM_NUMBER_SHIFT         (30U)
#define H264DCD_PKT_LENGTH_SHIFT            (0U)
#define H264DCD_PKT_LENGTH_MASK             ((uint32_t)(0x00007FFF) << (H264DCD_PKT_LENGTH_SHIFT))

/*  STREAM PACKET CONFIGURATION REGISTER  */
#define H264DCD_STR3_WATERMARK_SHIFT        (24U)
#define H264DCD_STR3_WATERMARK_MASK         ((uint32_t)(0x000000FF) << (H264DCD_STR3_WATERMARK_SHIFT))
#define H264DCD_STR2_WATERMARK_SHIFT        (16U)
#define H264DCD_STR2_WATERMARK_MASK         ((uint32_t)(0x000000FF) << (H264DCD_STR2_WATERMARK_SHIFT))
#define H264DCD_STR1_WATERMARK_SHIFT        (8U)
#define H264DCD_STR1_WATERMARK_MASK         ((uint32_t)(0x000000FF) << (H264DCD_STR1_WATERMARK_SHIFT))
#define H264DCD_STR0_WATERMARK_SHIFT        (0U)
#define H264DCD_STR0_WATERMARK_MASK         ((uint32_t)(0x000000FF) << (H264DCD_STR0_WATERMARK_SHIFT))
#define H264DCD_STR_WATERMARK_SIZE          (0x000000FFU)

/*  STREAM 0&1 PACKET FIFO STATUS REGISTER  */
#define H264DCD_STR1_ACTIVLOC_SHIFT         (24U)
#define H264DCD_STR1_ACTIVLOC_MASK          ((uint32_t)(0x000000FF) << (H264DCD_STR1_ACTIVLOC_SHIFT))
#define H264DCD_STR0_ACTIVLOC_SHIFT         (16U)
#define H264DCD_STR0_ACTIVLOC_MASK          ((uint32_t)(0x000000FF) << (H264DCD_STR0_ACTIVLOC_SHIFT))
#define H264DCD_STR1_LEVEL_SHIFT            (8U)
#define H264DCD_STR1_LEVEL_MASK             ((uint32_t)(0x000000FF) << (H264DCD_STR1_LEVEL_SHIFT))
#define H264DCD_STR0_LEVEL_SHIFT            (0U)
#define H264DCD_STR0_LEVEL_MASK             ((uint32_t)(0x000000FF) << (H264DCD_STR0_LEVEL_SHIFT))

/*  STREAM 2&3 PACKET FIFO STATUS REGISTER  */
#define H264DCD_STR3_ACTIVLOC_SHIFT         (24U)
#define H264DCD_STR3_ACTIVLOC_MASK          ((uint32_t)(0x000000FF) << (H264DCD_STR3_ACTIVLOC_SHIFT))
#define H264DCD_STR2_ACTIVLOC_SHIFT         (16U)
#define H264DCD_STR2_ACTIVLOC_MASK          ((uint32_t)(0x000000FF) << (H264DCD_STR2_ACTIVLOC_SHIFT))
#define H264DCD_STR3_LEVEL_SHIFT            (8U)
#define H264DCD_STR3_LEVEL_MASK             ((uint32_t)(0x000000FF) << (H264DCD_STR3_LEVEL_SHIFT))
#define H264DCD_STR2_LEVEL_SHIFT            (0U)
#define H264DCD_STR2_LEVEL_MASK             ((uint32_t)(0x000000FF) << (H264DCD_STR2_LEVEL_SHIFT))

/* PACKET STATUS REGISTER  */
#define H264DCD_PKT_CFG_VALID_SHIFT         (31U)
#define H264DCD_PKT_CFG_VALID_MASK          ((uint32_t)(0x00000001) << (H264DCD_PKT_CFG_VALID_SHIFT))
#define H264DCD_PKT_ADDR_OFFSET_SHIFT       (0U)
#define H264DCD_PKT_ADDR_OFFSET_MASK        ((uint32_t)(0x0000FFFF) << (H264DCD_PKT_ADDR_OFFSET_SHIFT))

#define H264DCD_OUT_BUF_ADDR_SHIFT          (3U)
#define H264DCD_OUT_BUF_ADDR_MASK           ((uint32_t)(0x0007FFFF) << (H264DCD_OUT_BUF_ADDR_SHIFT))

/*  OUT STREAM NUMBER OF LINES REGISTER  */
#define H264DCD_OUT_LUMA_LINES_SHIFT        (0U)
#define H264DCD_OUT_LUMA_LINES_MASK         ((uint32_t)(0x0000FFFF) << (H264DCD_OUT_LUMA_LINES_SHIFT))

/*  OUT RATE FLOWCONTROL REGISTER  */
#define H264DCD_RATEFLOW_EN_SHIFT           (31U)
#define H264DCD_RATEFLOW_EN_MASK            ((uint32_t)(0x00000001) << (H264DCD_RATEFLOW_EN_SHIFT))
#define H264DCD_BNKSTR_LENGTH_SHIFT         (0U)
#define H264DCD_BNKSTR_LENGTH_MASK          ((uint32_t)(0x00000007) << (H264DCD_BNKSTR_LENGTH_SHIFT))

/*  TIMEOUT STATUS REGISTER  */
#define H264DCD_ERR_TO_FLAG_MASK            (uint32_t)(0x0000000F)

/*  INTERRUPT ENABLE/DISABLE REGISTER  */
#define H264DCD_INT_ERR_SHIFT               (31U)
#define H264DCD_INT_ERR_MASK                ((uint32_t)(0x00000001) << (H264DCD_INT_ERR_SHIFT))
#define H264DCD_INT_TIMEOUT_SHIFT           (30U)
#define H264DCD_INT_TIMEOUT_MASK            ((uint32_t)(0x00000001) << (H264DCD_INT_TIMEOUT_SHIFT))
#define H264DCD_CH3_THR2_SHIFT              (27U)
#define H264DCD_CH3_THR2_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH3_THR2_SHIFT))
#define H264DCD_CH2_THR2_SHIFT              (26U)
#define H264DCD_CH2_THR2_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH2_THR2_SHIFT))
#define H264DCD_CH1_THR2_SHIFT              (25U)
#define H264DCD_CH1_THR2_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH1_THR2_SHIFT))
#define H264DCD_CH0_THR2_SHIFT              (24U)
#define H264DCD_CH0_THR2_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH0_THR2_SHIFT))
#define H264DCD_CH3_THR1_SHIFT              (23U)
#define H264DCD_CH3_THR1_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH3_THR1_SHIFT))
#define H264DCD_CH2_THR1_SHIFT              (22U)
#define H264DCD_CH2_THR1_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH2_THR1_SHIFT))
#define H264DCD_CH1_THR1_SHIFT              (21U)
#define H264DCD_CH1_THR1_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH1_THR1_SHIFT))
#define H264DCD_CH0_THR1_SHIFT              (20U)
#define H264DCD_CH0_THR1_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH0_THR1_SHIFT))
#define H264DCD_CH3_THR0_SHIFT              (19U)
#define H264DCD_CH3_THR0_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH3_THR0_SHIFT))
#define H264DCD_CH2_THR0_SHIFT              (18U)
#define H264DCD_CH2_THR0_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH2_THR0_SHIFT))
#define H264DCD_CH1_THR0_SHIFT              (17U)
#define H264DCD_CH1_THR0_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH1_THR0_SHIFT))
#define H264DCD_CH0_THR0_SHIFT              (16U)
#define H264DCD_CH0_THR0_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH0_THR0_SHIFT))
#define H264DCD_INT_STR3_OOS_SHIFT          (15U)
#define H264DCD_INT_STR3_OOS_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR3_OOS_SHIFT))
#define H264DCD_INT_STR2_OOS_SHIFT          (14U)
#define H264DCD_INT_STR2_OOS_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR2_OOS_SHIFT))
#define H264DCD_INT_STR1_OOS_SHIFT          (13U)
#define H264DCD_INT_STR1_OOS_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR1_OOS_SHIFT))
#define H264DCD_INT_STR0_OOS_SHIFT          (12U)
#define H264DCD_INT_STR0_OOS_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR0_OOS_SHIFT))
#define H264DCD_INT_STR3_FIFO_WTM_SHIFT     (11U)
#define H264DCD_INT_STR3_FIFO_WTM_MASK      ((uint32_t)(0x00000001) << (H264DCD_INT_STR3_FIFO_WTM_SHIFT))
#define H264DCD_INT_STR2_FIFO_WTM_SHIFT     (10U)
#define H264DCD_INT_STR2_FIFO_WTM_MASK      ((uint32_t)(0x00000001) << (H264DCD_INT_STR2_FIFO_WTM_SHIFT))
#define H264DCD_INT_STR1_FIFO_WTM_SHIFT     (9U)
#define H264DCD_INT_STR1_FIFO_WTM_MASK      ((uint32_t)(0x00000001) << (H264DCD_INT_STR1_FIFO_WTM_SHIFT))
#define H264DCD_INT_STR0_FIFO_WTM_SHIFT     (8U)
#define H264DCD_INT_STR0_FIFO_WTM_MASK      ((uint32_t)(0x00000001) << (H264DCD_INT_STR0_FIFO_WTM_SHIFT))
#define H264DCD_INT_STR3_MBROW_DONE_SHIFT   (7U)
#define H264DCD_INT_STR3_MBROW_DONE_MASK    ((uint32_t)(0x00000001) << (H264DCD_INT_STR3_MBROW_DONE_SHIFT))
#define H264DCD_INT_STR2_MBROW_DONE_SHIFT   (6U)
#define H264DCD_INT_STR2_MBROW_DONE_MASK    ((uint32_t)(0x00000001) << (H264DCD_INT_STR2_MBROW_DONE_SHIFT))
#define H264DCD_INT_STR1_MBROW_DONE_SHIFT   (5U)
#define H264DCD_INT_STR1_MBROW_DONE_MASK    ((uint32_t)(0x00000001) << (H264DCD_INT_STR1_MBROW_DONE_SHIFT))
#define H264DCD_INT_STR0_MBROW_DONE_SHIFT   (4U)
#define H264DCD_INT_STR0_MBROW_DONE_MASK    ((uint32_t)(0x00000001) << (H264DCD_INT_STR0_MBROW_DONE_SHIFT))
#define H264DCD_INT_STR3_EOF_SHIFT          (3U)
#define H264DCD_INT_STR3_EOF_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR3_EOF_SHIFT))
#define H264DCD_INT_STR2_EOF_SHIFT          (2U)
#define H264DCD_INT_STR2_EOF_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR2_EOF_SHIFT))
#define H264DCD_INT_STR1_EOF_SHIFT          (1U)
#define H264DCD_INT_STR1_EOF_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR1_EOF_SHIFT))
#define H264DCD_INT_STR0_EOF_SHIFT          (0U)
#define H264DCD_INT_STR0_EOF_MASK           ((uint32_t)(0x00000001) << (H264DCD_INT_STR0_EOF_SHIFT))
#define H264DCD_INT_ALL_MASK                (0xCFFFFFFFU)

/*  ELLVC CONFIGURATION REGISTER  */
#define H264DCD_CH3_STOP_SHIFT              (27U)
#define H264DCD_CH3_STOP_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH3_STOP_SHIFT))
#define H264DCD_CH2_STOP_SHIFT              (26U)
#define H264DCD_CH2_STOP_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH2_STOP_SHIFT))
#define H264DCD_CH1_STOP_SHIFT              (25U)
#define H264DCD_CH1_STOP_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH1_STOP_SHIFT))
#define H264DCD_CH0_STOP_SHIFT              (24U)
#define H264DCD_CH0_STOP_MASK               ((uint32_t)(0x00000001) << (H264DCD_CH0_STOP_SHIFT))
#define H264DCD_MEM_TYPE_SHIFT              (8U)
#define H264DCD_MEM_TYPE_MASK               ((uint32_t)(0x00000001) << (H264DCD_MEM_TYPE_SHIFT))
#define H264DCD_DEBLOCKFILTER_OFF_SHIFT     (0U)
#define H264DCD_DEBLOCKFILTER_OFF_MASK      ((uint32_t)(0x00000001) << (H264DCD_DEBLOCKFILTER_OFF_SHIFT))

/*  ELLVC STATE REGISTER  */
#define H264DCD_CH3_STATE_SHIFT             (24U)
#define H264DCD_CH3_STATE_MASK              ((uint32_t)(0x0000001F) << (H264DCD_CH3_STATE_SHIFT))
#define H264DCD_CH2_STATE_SHIFT             (16U)
#define H264DCD_CH2_STATE_MASK              ((uint32_t)(0x0000001F) << (H264DCD_CH2_STATE_SHIFT))
#define H264DCD_CH1_STATE_SHIFT             (8U)
#define H264DCD_CH1_STATE_MASK              ((uint32_t)(0x0000001F) << (H264DCD_CH1_STATE_SHIFT))
#define H264DCD_CH0_STATE_SHIFT             (0U)
#define H264DCD_CH0_STATE_MASK              ((uint32_t)(0x0000001F) << (H264DCD_CH0_STATE_SHIFT))

/*  ELLVC PICTURE BIT REGISTER  */
#define H264DCD_CH3_SAMPLE_BITDEPTH_SHIFT   (24U)
#define H264DCD_CH3_SAMPLE_BITDEPTH_MASK    ((uint32_t)(0x00000003) << (H264DCD_CH3_SAMPLE_BITDEPTH_SHIFT))
#define H264DCD_CH2_SAMPLE_BITDEPTH_SHIFT   (16U)
#define H264DCD_CH2_SAMPLE_BITDEPTH_MASK    ((uint32_t)(0x00000003) << (H264DCD_CH2_SAMPLE_BITDEPTH_SHIFT))
#define H264DCD_CH1_SAMPLE_BITDEPTH_SHIFT   (8U)
#define H264DCD_CH1_SAMPLE_BITDEPTH_MASK    ((uint32_t)(0x00000003) << (H264DCD_CH1_SAMPLE_BITDEPTH_SHIFT))
#define H264DCD_CH0_SAMPLE_BITDEPTH_SHIFT   (0U)
#define H264DCD_CH0_SAMPLE_BITDEPTH_MASK    ((uint32_t)(0x00000003) << (H264DCD_CH0_SAMPLE_BITDEPTH_SHIFT))

/*  ELLVC PICTURE HEIGHT REGISTER  */
#define H264DCD_CH3_WIDTH_HEIGHT_SHIFT      (24U)
#define H264DCD_CH3_WIDTH_HEIGHT_MASK       ((uint32_t)(0x000000FF) << (H264DCD_CH3_WIDTH_HEIGHT_SHIFT))
#define H264DCD_CH2_WIDTH_HEIGHT_SHIFT      (16U)
#define H264DCD_CH2_WIDTH_HEIGHT_MASK       ((uint32_t)(0x000000FF) << (H264DCD_CH2_WIDTH_HEIGHT_SHIFT))
#define H264DCD_CH1_WIDTH_HEIGHT_SHIFT      (8U)
#define H264DCD_CH1_WIDTH_HEIGHT_MASK       ((uint32_t)(0x000000FF) << (H264DCD_CH1_WIDTH_HEIGHT_SHIFT))
#define H264DCD_CH0_WIDTH_HEIGHT_SHIFT      (0U)
#define H264DCD_CH0_WIDTH_HEIGHT_MASK       ((uint32_t)(0x000000FF) << (H264DCD_CH0_WIDTH_HEIGHT_SHIFT))

#define H264DCD_CHX_LINES_SHIFT                 (16U)
#define H264DCD_CHX_LINES_MASK                  ((uint32_t)(0x00000FFF) << (H264DCD_CHX_LINES_SHIFT))
#define H264DCD_CHY_LINES_SHIFT                 (0U)
#define H264DCD_CHY_LINES_MASK                  ((uint32_t)(0x00000FFF) << (H264DCD_CHY_LINES_SHIFT))

/*  ELLVC PICTURE PARAMETER VALID REGISTER  */
#define H264DCD_CH3_PARAM_VALID_SHIFT           (24U)
#define H264DCD_CH3_PARAM_VALID_MASK            ((uint32_t)(0x00000001) << (H264DCD_CH3_PARAM_VALID_SHIFT))
#define H264DCD_CH2_PARAM_VALID_SHIFT           (16U)
#define H264DCD_CH2_PARAM_VALID_MASK            ((uint32_t)(0x00000001) << (H264DCD_CH2_PARAM_VALID_SHIFT))
#define H264DCD_CH1_PARAM_VALID_SHIFT           (8U)
#define H264DCD_CH1_PARAM_VALID_MASK            ((uint32_t)(0x00000001) << (H264DCD_CH1_PARAM_VALID_SHIFT))
#define H264DCD_CH0_PARAM_VALID_SHIFT           (0U)
#define H264DCD_CH0_PARAM_VALID_MASK            ((uint32_t)(0x00000001) << (H264DCD_CH0_PARAM_VALID_SHIFT))

/*  ELLVC STATUS REGISTER  */
#define H264DCD_NEW_POC_CYCLE_SHIFT             (17U)
#define H264DCD_NEW_POC_CYCLE_MASK              ((uint32_t)(0x00000001) << (H264DCD_NEW_POC_CYCLE_SHIFT))
#define H264DCD_MAX_REFFRAMENUM_SHIFT           (0U)
#define H264DCD_MAX_REFFRAMENUM_MASK            ((uint32_t)(0x0000001F) << (H264DCD_MAX_REFFRAMENUM_SHIFT))

/************************************************
    H264DCD Functions Low Level
*************************************************/
void H264dcd_inputstream_cfg(H264DCD_REGS *reg_base, const H264DCD_STREAM_DATA_CONFIG *data_config);
void H264dcd_packetstatus_get(const H264DCD_REGS *reg_base, H264DCD_STREAM_DATA_STATUS *pck_status);

void H264dcd_fifostatus_get(const H264DCD_REGS *reg_base, H264DCD_STREAM_FIFO_STATUS *fifo_st);
void H264dcd_fifo_wtmklevel_set(H264DCD_REGS *reg_base, H264DCD_FIFO_WTM wtmark);
void H264dcd_fifo_clear(H264DCD_REGS *reg_base, H264DCD_STREAM_ID str_no);

void H264dcd_timeoutset(H264DCD_REGS *reg_base, uint16_t h264_timeout);
void H264dcd_timeouten(H264DCD_REGS *reg_base, H264DCD_TIMEOUT_ENABLE to_en);

void H264dcd_swreset(H264DCD_REGS *reg_base);

void H264dcd_output_cfg(H264DCD_REGS *reg_base, const H264DCD_OUTPUT_BUFFCFG *output_cfg);
void H264dcd_outsamplemode_set(H264DCD_REGS *reg_base, H264DCD_OUTPUT_SAMPLEMODE outputregsmpl_mode);
void H264dcd_outcolourdata_set(H264DCD_REGS *reg_base, const H264DCD_OUTPUT_COLOURDATA *out_coldata);

void H264dcd_flowmode_set(H264DCD_REGS *reg_base, H264DCD_DATAFLOW_MODE data_mode);
void H264dcd_flowmode_get(const H264DCD_REGS *reg_base, H264DCD_DATAFLOW_MODE *data_mode);

void H264dcd_bankstride_set(H264DCD_REGS *reg_base, H264DCD_OUTPUT_BKSTRIDE out_bks);
void H264dcd_bankstride_get(const H264DCD_REGS *reg_base, H264DCD_OUTPUT_BKSTRIDE *out_bks);

void H264dcd_dcd_chcontrol(H264DCD_REGS *reg_base, H264DCD_CH_CONTROL channel_ctrl);

void H264dcd_dcd_inframesz(H264DCD_REGS *reg_base, const H264DCD_INFRAME_SIZE *im_data);

void H264dcd_dcd_cfgset(H264DCD_REGS *reg_base, const H264DCD_DECOD_CONFIG *dcd_cfg);
void H264dcd_dcd_cfgget(const H264DCD_REGS *reg_base, H264DCD_DECOD_CONFIG *dcd_cfg);

void H264dcd_thrlevels_set(H264DCD_REGS *reg_base, const H264DCD_DECOD_THRLEVELS *dcd_level);
void H264dcd_thrlevels_get(const H264DCD_REGS *reg_base, H264DCD_DECOD_THRLEVELS *dcd_level);

void H264dcd_refmemaddress_set(H264DCD_REGS *reg_base, H264DCD_DECOD_REFMEM refmem_add);
void H264dcd_refmemaddress_get(const H264DCD_REGS *reg_base, H264DCD_DECOD_REFMEM *refmem_add);

void H264dcd_chstatus_get(const H264DCD_REGS *reg_base, H264DCD_DECOD_CHANNELST *ch_st);

void H264dcd_pictureparam_get(const H264DCD_REGS *reg_base, H264DCD_PIC_PARAMS *picture_st);
void H264dcd_picturestatus_get(const H264DCD_REGS *reg_base, H264DCD_PIC_STATUS *pic_valid);
void H264dcd_picgenparams_get(const H264DCD_REGS *reg_base, H264DCD_PIC_GENPARAMS *poc_st);

void H264dcd_interrupt_ctrl(H264DCD_REGS *reg_base, uint32_t intr_mask);
void H264dcd_interrupt_get(const H264DCD_REGS *reg_base, uint32_t *intr_mask);
void H264dcd_timeoutirq_get(H264DCD_REGS *reg_base, H264DCD_IRQ_TIMEOUT *timeout_irq);
void H264dcd_errorirq_get(H264DCD_REGS *reg_base, H264DCD_IRQ_ERROR *error_irq);
void H264dcd_streamirq_get(H264DCD_REGS *reg_base, H264DCD_IRQ_STREAM *streamirq_st);

#endif /* H264DCDCORE_H */
