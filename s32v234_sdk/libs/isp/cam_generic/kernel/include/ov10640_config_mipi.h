/*
 * Copyright (c) 2015-2016 Freescale Semiconductor
 * Copyright 2017 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
* \file     ov10640_config_mipi.h
* \brief    definition of Ov10640 camera registers configuration with Maxim
            From OV
* \author   Tomas Babinec
* \version  0.1
* \date     3.4.2015
* \note
****************************************************************************/

#ifndef OV10640CONFIGMIPI_H
#define OV10640CONFIGMIPI_H

//#define OV10640_1288x728x30fps
//#define OV10640_1288x728x25fps
//#define OV10640_1288x728x22fps
#define OV10640_1288x728x20fps
//#define OV10640_1288x728x12dot5fps

//#define OV10640_1288x968x30fps
//#define OV10640_1288x968x25fps
//#define OV10640_1288x968x22fps
//#define OV10640_1288x968x20fps

#define OV10640_ROTATE

#if defined(OV10640_ROTATE)
#define FLIP   0
#define MIRROR 1
#define GRGB_MASK 6
#else
#define FLIP   1
#define MIRROR 0
#define GRGB_MASK 9
#endif

//#define AEC_OLD
#define OV10640_AEC_ON  // enables AutoExposureControl on
#ifdef MAXIM
static uint8_t Ov10640_FsinTable[] =
  {
    0x30, 0x8c, 0x31,                //enable external frame sync
    //0x30, 0x8c, 0xb1,
    0x30, 0x12, 0x01,                // stream on
  }; // Ov10640_FsinTable[]
#endif // #ifdef MAXIM

#if 0
static uint8_t OV10640_StreamingOn[] =
  {
    0x30, 0x12, 0x01, //;;Streaming On
  }; //OV10640_StreamingOn

static uint8_t OV10640_StreamingOff[] =
  {
    0x30, 0x12, 0x00, //;;Streaming Off
  }; //OV10640_StreamingOff
#endif // 0

#ifndef __KERNEL__
static uint8_t OV10640_change_to_long_exposure[] =
  {
    //change to long exposure        
    0x31, 0x19, 0x55,
  }; //OV10640_change_to_long_exposure

static uint8_t OV10640_change_to_short_exposure[] =
  {
    //change to short exposure
    0x31, 0x19, 0x56,
  }; //OV10640_change_to_short_exposure

static uint8_t OV10640_change_to_veryshort_exposure[] =
  {
    //change to very short exposure
    0x31, 0x19, 0x57,
  }; //OV10640_change_to_veryshort_exposure

static uint8_t Ov10640_MIPI_basic_configuration_2MIPI_lane_12bcombined[] =
  {

    0x32, 0x8a, 0x01,
    0x31, 0x3f, 0x80,
    0x31, 0x32, 0x24,

    0x30, 0x00, 0x03, // PLL setings: Predivider
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,
    0x30, 0x00, 0x03,

    0x30, 0x01, 0x38, // PLL settings
    0x30, 0x02, 0x07,
    0x30, 0x04, 0x03,
    0x30, 0x05, 0x38,
    0x30, 0x06, 0x07,
    0x30, 0x07, 0x01, // end PLL settings
    0x30, 0x14, 0x03, // power up
    0x30, 0x23, 0x05, // dvp drive strength
    0x30, 0x32, 0x34, // end of embedded data range H
    0x30, 0x33, 0xfb, // ...L
    0x30, 0x54, 0x00, 
    0x30, 0x55, 0x0f,
    0x30, 0x56, 0x01,
    0x30, 0x57, 0xff,
    0x30, 0x58, 0xbf,
    0x30, 0x59, 0x44,
    0x30, 0x5a, 0x02,
    0x30, 0x5b, 0x00,
    0x30, 0x5c, 0x30,
    0x30, 0x5d, 0x1d,
    0x30, 0x5e, 0x16, // color bar overlap
    0x30, 0x5f, 0x18, // color bar intensity
    0x30, 0x60, 0xf9,
    0x30, 0x61, 0xf0,
    0x30, 0x8c, 0x03, // sensor control (adc swap, extra delay)
    0x30, 0x8f, 0x20, // skip ctrl

    
    0x30, 0x90, 0x00 | (FLIP <<3) | (MIRROR <<2), // read mode: 3exp, no flip [3], no mirror[2]
    0x32, 0x91, 0x00 | (FLIP <<2) | (MIRROR <<1), // flip offset: flip[2], mirror[1] (0x6)
    0x31, 0x28, 0xc0 | (FLIP <<1) | (MIRROR <<0), // ISP flip offset: flip[1], mirror[0] (0x3)

    0x30, 0x91, 0x00, // read ctrl (embbedded line off)
    0x30, 0xeb, 0x00, // expsoure conversion & analog gain
    0x30, 0xa3, 0x08,
    0x30, 0xad, 0x03,
    0x30, 0xae, 0x80,
    0x30, 0xaf, 0x80,
    0x30, 0xb0, 0xff,
    0x30, 0xb1, 0x3f,
    0x30, 0xb2, 0x22,
    0x30, 0xb9, 0x32, // black level correction  (bit[4])
    0x30, 0xba, 0x01, // black level correction 1/32 time constant
    0x30, 0xbb, 0x00,
    0x30, 0xbc, 0x00,
    0x30, 0xbd, 0x00,
    0x30, 0xbe, 0x00,
    0x30, 0xbf, 0x00,
    0x30, 0xc0, 0x00,
    0x30, 0xc1, 0x00,
    0x30, 0xc2, 0x00,
    
    0x30, 0xc3, 0x00,
    0x30, 0xc4, 0x00, // blc target for L : 0x80 default set to 0 

    0x30, 0xc5, 0x00,
    0x30, 0xc6, 0x00, // blc target for S : 0x80 default set to 0

    0x30, 0xc7, 0x00,
    0x30, 0xc8, 0x00, // blc target for VS: 0x80 default set to 0
    // end of black level correction
    //0x31, 0x19, 0x14, // interaface ctrl: 12b combined
    0x31, 0x19, 0x55, // interface ctrl: 12b long, MIPI, no compression
    0x31, 0x1a, 0x01,
    0x31, 0x1b, 0x4a,
    // geometry setting

    0x30, 0x74, 0x00, //horizontal cropping start H
    0x30, 0x75, 0x00, // ... L (=0 =(1288 -1288)/2)
    0x30, 0x76, 0x00, // vertical cropping start H
    0x30, 0x77, 0x3e, // ... L
    //0x30, 0x77, 0xb6, // ... L (=182 = (1092-728)/2)
    0x30, 0x78, 0x05, // horizontal cropping end H
    0x30, 0x79, 0x07, // ... L (=1287)
    0x30, 0x7a, 0x04, // vertical cropping end H
    0x30, 0x7b, 0x05, // ... L
    //0x30, 0x7a, 0x03, // vertical cropping end H
    //0x30, 0x7b, 0x8d, // ... L (909=182-1+728)
    0x30, 0x7c, 0x05, // DVP horizointal size H
    0x30, 0x7d, 0x00, // ... L (=1280)
    //0x30, 0x7d, 0x08, // ... L (=1288)
    0x30, 0x7e, 0x03, // DVP vertical size H
    0x30, 0x7f, 0xc0, // ... L
    //0x30, 0x7e, 0x02, // DVP vertical size H
    //0x30, 0x7f, 0xd8, // ... L (=728)

    0x30, 0x80, 0x07, // Line length H
    0x30, 0x81, 0x43, // ... L (=1859)
    0x30, 0x82, 0x03, // Frame height H
    0x30, 0x83, 0xec, // ... L (=1004)
    //0x30, 0x82, 0x04, // Frame height H
    //0x30, 0x83, 0x8e, // ... L
    0x30, 0x84, 0x00, // HOffset H
    0x30, 0x85, 0x02, // ... L
    //0x30, 0x85, 0x00, // ... L
    0x30, 0x86, 0x00, // VOffset H
    0x30, 0x87, 0x04, // ... L
    //0x30, 0x87, 0x00, // ... L

    0x30, 0x88, 0x00,
    0x30, 0x89, 0x40,
    0x30, 0x8d, 0x92, // row count: black lines = 8, first active =2
    0x30, 0x94, 0xa5,
    // exposure setting if uncontrolled
    0x30, 0xe6, 0x03, // L exposure time H
    0x30, 0xe7, 0xe8, // L exposure time L
    0x30, 0xe8, 0x03, // S exposure time H
    0x30, 0xe9, 0xe8, // S exposure time L
    0x30, 0xe9, 0x05, // should be 30ea??
    0x30, 0xec, 0x01, // digital gain long  H =1.00
    0x30, 0xfa, GRGB_MASK, // HDR AEC: bayer mask = GR|GB (rotated:6 normal 9)

    0x31, 0x20, 0x00, // VSync delay H
    0x31, 0x21, 0x01, // ... M
    0x31, 0x22, 0x00, // ... L = 256
    // ISP Control
    0x31, 0x27, 0x23, // ISP enable, WB enable, dead pixel control enable
    //0x31, 0x27, 0x63, // ISP enable: WB gain, dead pixel control enable, isp crop en
    //0x31, 0x28, 0xc0 | (FLIP <<1) | (MIRROR <<0), // ISP flip offset: flip[1], mirror[0] (0x3)
    0x31, 0x29, 0x00, // test mode off
    //
    0x31, 0xbe, 0x00,
    0x30, 0xa5, 0x78,
    0x30, 0xa6, 0x40,
    0x30, 0xa7, 0x78,
    0x30, 0xa8, 0x80,
    0x30, 0xa9, 0x78,
    0x30, 0xaa, 0xe0,
    0x30, 0xab, 0x79,
    0x30, 0xac, 0xc0,
    // MIPI CTRL
    0x34, 0x40, 0x04,
    0x34, 0x44, 0x28, // 2 lanes
    0x34, 0x4e, 0x2c, // embedded data type
    0x34, 0x57, 0x33,
    0x34, 0x5e, 0x38,
    0x34, 0x61, 0xa8,
    // Exposure calculate default if static
    // 
    //0x70, 0x02, 0xaa,
    //0x70, 0x01, 0xdf,
    //0x70, 0x48, 0x00,
    //0x70, 0x49, 0x02,
    //0x70, 0x4a, 0x02,
    //0x70, 0x4b, 0x00,
    //0x70, 0x4c, 0x01,
    //0x70, 0x4d, 0x00,
    //0x70, 0x43, 0x04,
    //0x70, 0x40, 0x3c,
    //0x70, 0x47, 0x00,
    //0x70, 0x44, 0x01,
    //0x70, 0x00, 0x1f,
    //0x70, 0x84, 0x01,
    //0x70, 0x85, 0x03,
    //0x70, 0x86, 0x02,
    //0x70, 0x87, 0x40,
    //0x70, 0x88, 0x01,
    //0x70, 0x89, 0x20,
    //0x70, 0x7f, 0x04,
    //0x70, 0x7c, 0x3c,
    //0x70, 0x83, 0x00,
    //0x70, 0x80, 0x01,
    //0x70, 0x03, 0xdf,
    //0x70, 0xc0, 0x00,
    //0x70, 0xc1, 0x02,
    //0x70, 0xc2, 0x02,
    //0x70, 0xc3, 0x00,
    //0x70, 0xc4, 0x01,
    //0x70, 0xc5, 0x00,
    //0x70, 0xb8, 0x03,
    //0x70, 0xb9, 0x98,
    //0x70, 0xbc, 0x00,
    //0x70, 0xbd, 0x80,
    //0x70, 0x04, 0x02,
    //0x70, 0x05, 0x00,
    //0x70, 0x06, 0x01,
    //0x70, 0x07, 0x80,
    //0x70, 0x08, 0x02,
    //0x70, 0x09, 0x00,
    //0x70, 0x0a, 0x04,
    //0x70, 0x0b, 0x00,
    //0x70, 0x0e, 0x00,
    //0x70, 0x0f, 0x60,
    //0x70, 0x1a, 0x02,
    //0x70, 0x1b, 0x00,
    //0x70, 0x1c, 0x01,
    //0x70, 0x1d, 0x80,
    //0x70, 0x1e, 0x02,
    //0x70, 0x1f, 0x00,
    //0x70, 0x20, 0x04,
    //0x70, 0x21, 0x00,
    //0x70, 0x24, 0x00,
    //0x70, 0x25, 0x60,
    //0x70, 0xe7, 0x00,
    //0x70, 0xe4, 0x10,
    //0x70, 0xe5, 0x00,
    //0x70, 0xe6, 0x00,
    //0x70, 0xeb, 0x00,
    //0x70, 0xe8, 0x10,
    //0x70, 0xe9, 0x00,
    //0x70, 0xea, 0x00,
    //0x70, 0xef, 0x00,
    //0x70, 0xec, 0xfd,
    //0x70, 0xed, 0x00,
    //0x70, 0xee, 0x00,
    //0x70, 0xeb, 0x00,
    //0x70, 0xf0, 0xfd,
    //0x70, 0xf1, 0x00,
    //0x70, 0xf2, 0x00, 

    // Pin diodes
    0x30, 0xfb, 0x06,
    0x30, 0xfc, 0x80,
    0x30, 0xfd, 0x02,
    0x30, 0xfe, 0x93,

    0x60, 0x00, 0xc1,  //0x60 black screen
    0x60, 0x01, 0xb9,
    0x60, 0x02, 0xba,
    0x60, 0x03, 0xa4,
    0x60, 0x04, 0xb5,
    0x60, 0x05, 0xa0,
    0x60, 0x06, 0x82,
    0x60, 0x07, 0xa7,
    0x60, 0x08, 0xb7,
    0x60, 0x09, 0x5c,
    0x60, 0x0a, 0x9e,
    0x60, 0x0b, 0xc0,
    0x60, 0x0c, 0xd2,
    0x60, 0x0d, 0x33,
    0x60, 0x0e, 0xcc,
    0x60, 0x0f, 0xde,
    0x60, 0x10, 0xc1,
    0x60, 0x11, 0xab,
    0x60, 0x12, 0xb7,
    0x60, 0x13, 0x00,
    0x60, 0x14, 0x00,
    0x60, 0x15, 0x00,
    0x60, 0x16, 0x00,
    0x60, 0x17, 0x00,
    0x60, 0x18, 0x00,
    0x60, 0x19, 0x00,
    0x60, 0x1a, 0x00,
    0x60, 0x1b, 0x00,
    0x60, 0x1c, 0x00,
    0x60, 0x1d, 0xc5,
    0x60, 0x1e, 0x54,
    0x60, 0x1f, 0x9c,
    0x60, 0x20, 0x94,
    0x60, 0x21, 0x90,
    0x60, 0x22, 0x2a,
    0x60, 0x23, 0x61,
    0x60, 0x24, 0xd2,
    0x60, 0x25, 0xcc,
    0x60, 0x26, 0x02,
    0x60, 0x27, 0x35,
    0x60, 0x28, 0xb1,
    0x60, 0x29, 0xb2,
    0x60, 0x2a, 0xb3,
    0x60, 0x2b, 0xd2,
    0x60, 0x2c, 0xd3,
    0x60, 0x2d, 0x0a,
    0x60, 0x2e, 0x31,
    0x60, 0x2f, 0xcc,
    0x60, 0x30, 0x05,
    0x60, 0x31, 0xc4,
    0x60, 0x32, 0xd2,
    0x60, 0x33, 0xce,
    0x60, 0x34, 0x17,
    0x60, 0x35, 0xcf,
    0x60, 0x36, 0x1d,
    0x60, 0x37, 0xd0,
    0x60, 0x38, 0x23,
    0x60, 0x39, 0xd2,
    0x60, 0x3a, 0xbc,
    0x60, 0x3b, 0xcc,
    0x60, 0x3c, 0x51,
    0x60, 0x3d, 0xc5,
    0x60, 0x3e, 0xd2,
    0x60, 0x3f, 0x00,
    0x60, 0x40, 0x2b,
    0x60, 0x41, 0xcc,
    0x60, 0x42, 0x09,
    0x60, 0x43, 0xd2,
    0x60, 0x44, 0x1a,
    0x60, 0x45, 0xcc,
    0x60, 0x46, 0xeb,
    0x60, 0x47, 0x12,
    0x60, 0x48, 0x2a,
    0x60, 0x49, 0xba,
    0x60, 0x4a, 0x56,
    0x60, 0x4b, 0xd3,
    0x60, 0x4c, 0x27,
    0x60, 0x4d, 0x54,
    0x60, 0x4e, 0xd4,
    0x60, 0x4f, 0xc1,
    0x60, 0x50, 0x26,
    0x60, 0x51, 0xd2,
    0x60, 0x52, 0x01,
    0x60, 0x53, 0xd3,
    0x60, 0x54, 0x2f,
    0x60, 0x55, 0x27,
    0x60, 0x56, 0x08,
    0x60, 0x57, 0x1a,
    0x60, 0x58, 0xcc,
    0x60, 0x59, 0xd9,
    0x60, 0x5a, 0x12,
    0x60, 0x5b, 0x2c,
    0x60, 0x5c, 0x11,
    0x60, 0x5d, 0x60,
    0x60, 0x5e, 0x50,
    0x60, 0x5f, 0xc2,
    0x60, 0x60, 0xb9,
    0x60, 0x61, 0xa5,
    0x60, 0x62, 0xb5,
    0x60, 0x63, 0xa0,
    0x60, 0x64, 0x82,
    0x60, 0x65, 0x5c,
    0x60, 0x66, 0xd4,
    0x60, 0x67, 0xc1,
    0x60, 0x68, 0xd4,
    0x60, 0x69, 0xc1,
    0x60, 0x6a, 0xd3,
    0x60, 0x6b, 0x01,
    0x60, 0x6c, 0x7c,
    0x60, 0x6d, 0x74,
    0x60, 0x6e, 0x00,
    0x60, 0x6f, 0x2a,
    0x60, 0x70, 0x61,
    0x60, 0x71, 0xd2,
    0x60, 0x72, 0xcc,
    0x60, 0x73, 0xde,
    0x60, 0x74, 0xc6,
    0x60, 0x75, 0xd2,
    0x60, 0x76, 0xcc,
    0x60, 0x77, 0x02,
    0x60, 0x78, 0x35,
    0x60, 0x79, 0xd3,
    0x60, 0x7a, 0x0f,
    0x60, 0x7b, 0x31,
    0x60, 0x7c, 0xcc,
    0x60, 0x7d, 0x05,
    0x60, 0x7e, 0xc5,
    0x60, 0x7f, 0xd2,
    0x60, 0x80, 0xbb,
    0x60, 0x81, 0xcc,
    0x60, 0x82, 0x17,
    0x60, 0x83, 0xd2,
    0x60, 0x84, 0xbd,
    0x60, 0x85, 0xcc,
    0x60, 0x86, 0x51,
    0x60, 0x87, 0xc6,
    0x60, 0x88, 0xd2,
    0x60, 0x89, 0x2b,
    0x60, 0x8a, 0xcc,
    0x60, 0x8b, 0x09,
    0x60, 0x8c, 0xd2,
    0x60, 0x8d, 0x1a,
    0x60, 0x8e, 0xcc,
    0x60, 0x8f, 0xeb,
    0x60, 0x90, 0x71,
    0x60, 0x91, 0x12,
    0x60, 0x92, 0x2a,
    0x60, 0x93, 0xd3,
    0x60, 0x94, 0x24,
    0x60, 0x95, 0x00,
    0x60, 0x96, 0x00,
    0x60, 0x97, 0x70,
    0x60, 0x98, 0xca,
    0x60, 0x99, 0x26,
    0x60, 0x9a, 0xd2,
    0x60, 0x9b, 0x01,
    0x60, 0x9c, 0xd3,
    0x60, 0x9d, 0x2f,
    0x60, 0x9e, 0x27,
    0x60, 0x9f, 0x08,
    0x60, 0xa0, 0x1a,
    0x60, 0xa1, 0x12,
    0x60, 0xa2, 0xcc,
    0x60, 0xa3, 0xd9,
    0x60, 0xa4, 0x60,
    0x60, 0xa5, 0x2c,
    0x60, 0xa6, 0x11,
    0x60, 0xa7, 0x50,
    0x60, 0xa8, 0x00,
    0x60, 0xa9, 0x00,
    0x60, 0xaa, 0xc0,
    0x60, 0xab, 0xb9,
    0x60, 0xac, 0xa3,
    0x60, 0xad, 0xb5,
    0x60, 0xae, 0xb5,
    0x60, 0xaf, 0x00,
    0x60, 0xb0, 0xa0,
    0x60, 0xb1, 0x82,
    0x60, 0xb2, 0x5c,
    0x60, 0xb3, 0xd4,
    0x60, 0xb4, 0xa6,
    0x60, 0xb5, 0x9d,
    0x60, 0xb6, 0xd3,
    0x60, 0xb7, 0x34,
    0x60, 0xb8, 0xb0,
    0x60, 0xb9, 0xb7,
    0x60, 0xba, 0x00,
    0x60, 0xbb, 0xd3,
    0x60, 0xbc, 0x0a,
    0x60, 0xbd, 0xd3,
    0x60, 0xbe, 0x10,
    0x60, 0xbf, 0x9c,
    0x60, 0xc0, 0x94,
    0x60, 0xc1, 0x90,
    0x60, 0xc2, 0xc8,
    0x60, 0xc3, 0xba,
    0x60, 0xc4, 0x7c,
    0x60, 0xc5, 0x74,
    0x60, 0xc6, 0x00,
    0x60, 0xc7, 0x2a,
    0x60, 0xc8, 0x61,
    0x60, 0xc9, 0x00,
    0x60, 0xca, 0xd2,
    0x60, 0xcb, 0xcc,
    0x60, 0xcc, 0xde,
    0x60, 0xcd, 0xc4,
    0x60, 0xce, 0xd2,
    0x60, 0xcf, 0xcc,
    0x60, 0xd0, 0x02,
    0x60, 0xd1, 0x35,
    0x60, 0xd2, 0xd2,
    0x60, 0xd3, 0xcc,
    0x60, 0xd4, 0x14,
    0x60, 0xd5, 0xd3,
    0x60, 0xd6, 0x09,
    0x60, 0xd7, 0x31,
    0x60, 0xd8, 0xd2,
    0x60, 0xd9, 0xcc,
    0x60, 0xda, 0x05,
    0x60, 0xdb, 0xd2,
    0x60, 0xdc, 0xbb,
    0x60, 0xdd, 0xcc,
    0x60, 0xde, 0x19,
    0x60, 0xdf, 0xd2,
    0x60, 0xe0, 0xbe,
    0x60, 0xe1, 0xce,
    0x60, 0xe2, 0x51,
    0x60, 0xe3, 0xcf,
    0x60, 0xe4, 0x54,
    0x60, 0xe5, 0xd0,
    0x60, 0xe6, 0x58,
    0x60, 0xe7, 0xd3,
    0x60, 0xe8, 0x01,
    0x60, 0xe9, 0x2b,
    0x60, 0xea, 0xcc,
    0x60, 0xeb, 0x09,
    0x60, 0xec, 0xd2,
    0x60, 0xed, 0xd9,
    0x60, 0xee, 0xd3,
    0x60, 0xef, 0xda,
    0x60, 0xf0, 0xd7,
    0x60, 0xf1, 0x1a,
    0x60, 0xf2, 0xcc,
    0x60, 0xf3, 0xeb,
    0x60, 0xf4, 0x12,
    0x60, 0xf5, 0xd4,
    0x60, 0xf6, 0xaf,
    0x60, 0xf7, 0x27,
    0x60, 0xf8, 0x00,
    0x60, 0xf9, 0xd2,
    0x60, 0xfa, 0xd3,
    0x60, 0xfb, 0x3b,
    0x60, 0xfc, 0xd9,
    0x60, 0xfd, 0xe0,
    0x60, 0xfe, 0xda,
    0x60, 0xff, 0xe4,
    0x61, 0x00, 0x1a,
    0x61, 0x01, 0x12,
    0x61, 0x02, 0xcc,
    0x61, 0x03, 0xd9,
    0x61, 0x04, 0x60,
    0x61, 0x05, 0x10,
    0x61, 0x06, 0x2c,
    0x61, 0x07, 0x5d,
    0x61, 0x08, 0xd3,
    0x61, 0x09, 0x0a,
    0x61, 0x0a, 0x5c,
    0x61, 0x0b, 0x01,
    0x61, 0x0c, 0x50,
    0x61, 0x0d, 0x11,
    0x61, 0x0e, 0xd6,
    0x61, 0x0f, 0xb7,
    0x61, 0x10, 0xb9,
    0x61, 0x11, 0xba,
    0x61, 0x12, 0xaf,
    0x61, 0x13, 0xdc,
    0x61, 0x14, 0xcb,
    0x61, 0x15, 0xc3,
    0x61, 0x16, 0xb9,
    0x61, 0x17, 0xa4,
    0x61, 0x18, 0xb5,
    0x61, 0x19, 0x5c,
    0x61, 0x1a, 0x12,
    0x61, 0x1b, 0x2a,
    0x61, 0x1c, 0x61,
    0x61, 0x1d, 0xd2,
    0x61, 0x1e, 0xcc,
    0x61, 0x1f, 0xe2,
    0x61, 0x20, 0x35,
    0x61, 0x21, 0xc7,
    0x61, 0x22, 0xd2,
    0x61, 0x23, 0x31,
    0x61, 0x24, 0xcc,
    0x61, 0x25, 0x05,
    0x61, 0x26, 0xc6,
    0x61, 0x27, 0xbb,
    0x61, 0x28, 0xd2,
    0x61, 0x29, 0xcc,
    0x61, 0x2a, 0x17,
    0x61, 0x2b, 0xd2,
    0x61, 0x2c, 0xbe,
    0x61, 0x2d, 0xcc,
    0x61, 0x2e, 0x51,
    0x61, 0x2f, 0xc7,
    0x61, 0x30, 0xd2,
    0x61, 0x31, 0xcc,
    0x61, 0x32, 0x09,
    0x61, 0x33, 0xb4,
    0x61, 0x34, 0xb7,
    0x61, 0x35, 0x94,
    0x61, 0x36, 0xd2,
    0x61, 0x37, 0x12,
    0x61, 0x38, 0x26,
    0x61, 0x39, 0x42,
    0x61, 0x3a, 0x46,
    0x61, 0x3b, 0x42,
    0x61, 0x3c, 0xd3,
    0x61, 0x3d, 0x20,
    0x61, 0x3e, 0x27,
    0x61, 0x3f, 0x00,
    0x61, 0x40, 0x1a,
    0x61, 0x41, 0xcc,
    0x61, 0x42, 0xd9,
    0x61, 0x43, 0x60,
    0x61, 0x44, 0x2c,
    0x61, 0x45, 0x11,
    0x61, 0x46, 0x40,
    0x61, 0x47, 0x50,
    0x61, 0x48, 0xb8,
    0x61, 0x49, 0x90,
    0x61, 0x4a, 0xd5,
    0x61, 0x4b, 0x00,
    0x61, 0x4c, 0xba,
    0x61, 0x4d, 0x00,
    0x61, 0x4e, 0x00,
    0x61, 0x4f, 0x00,
    0x61, 0x50, 0x00,
    0x61, 0x51, 0x00,
    0x61, 0x52, 0x00,
    0x61, 0x53, 0xaa,
    0x61, 0x54, 0xb7,
    0x61, 0x55, 0x00,
    0x61, 0x56, 0x00,
    0x61, 0x57, 0x00,
    0x61, 0x58, 0x00,
    0x61, 0x59, 0xa6,
    0x61, 0x5a, 0xb7,
    0x61, 0x5b, 0x00,
    0x61, 0x5c, 0xd5,
    0x61, 0x5d, 0x00,
    0x61, 0x5e, 0x71,
    0x61, 0x5f, 0xd3,
    0x61, 0x60, 0x3e,
    0x61, 0x61, 0xba,
    0x61, 0x62, 0x00,
    0x61, 0x63, 0x00,
    0x61, 0x64, 0x00,
    0x61, 0x65, 0x00,
    0x61, 0x66, 0xd3,
    0x61, 0x67, 0x10,
    0x61, 0x68, 0x70,
    0x61, 0x69, 0x00,
    0x61, 0x6a, 0x00,
    0x61, 0x6b, 0x00,
    0x61, 0x6c, 0x00,
    0x61, 0x6d, 0xd5,
    0x61, 0x6e, 0xba,
    0x61, 0x6f, 0xb0,
    0x61, 0x70, 0xb7,
    0x61, 0x71, 0x00,
    0x61, 0x72, 0x9d,
    0x61, 0x73, 0xd3,
    0x61, 0x74, 0x0a,
    0x61, 0x75, 0x9d,
    0x61, 0x76, 0x9d,
    0x61, 0x77, 0xd3,
    0x61, 0x78, 0x10,
    0x61, 0x79, 0x9c,
    0x61, 0x7a, 0x94,
    0x61, 0x7b, 0x90,
    0x61, 0x7c, 0xc8,
    0x61, 0x7d, 0xba,
    0x61, 0x7e, 0xd2,
    0x61, 0x7f, 0x30,
    0x61, 0x80, 0xd5,
    0x61, 0x81, 0x00,
    0x61, 0x82, 0xba,
    0x61, 0x83, 0xb0,
    0x61, 0x84, 0xb7,
    0x61, 0x85, 0x00,
    0x61, 0x86, 0x9d,
    0x61, 0x87, 0xd3,
    0x61, 0x88, 0x0a,
    0x61, 0x89, 0x9d,
    0x61, 0x8a, 0x9d,
    0x61, 0x8b, 0xd3,
    0x61, 0x8c, 0x10,
    0x61, 0x8d, 0x9c,
    0x61, 0x8e, 0x94,
    0x61, 0x8f, 0x90,
    0x61, 0x90, 0xc8,
    0x61, 0x91, 0xba,
    0x61, 0x92, 0xd5,
    0x61, 0x93, 0x00,
    0x61, 0x94, 0xba,
    0x61, 0x95, 0xb0,
    0x61, 0x96, 0xb7,
    0x61, 0x97, 0x00,
    0x61, 0x98, 0x9d,
    0x61, 0x99, 0xd3,
    0x61, 0x9a, 0x0a,
    0x61, 0x9b, 0x9d,
    0x61, 0x9c, 0x9d,
    0x61, 0x9d, 0xd3,
    0x61, 0x9e, 0x10,
    0x61, 0x9f, 0x9c,
    0x61, 0xa0, 0x94,
    0x61, 0xa1, 0x90,
    0x61, 0xa2, 0xc9,
    0x61, 0xa3, 0xba,
    0x61, 0xa4, 0xd5,
    0x61, 0xa5, 0x00,
    0x61, 0xa6, 0x00,
    0x61, 0xa7, 0x1a,
    0x61, 0xa8, 0x12,
    0x61, 0xa9, 0xcc,
    0x61, 0xaa, 0xeb,
    0x61, 0xab, 0xd2,
    0x61, 0xac, 0xd5,
    0x61, 0xad, 0x00,
    0x61, 0xae, 0x00,
    0x61, 0xaf, 0x1a,
    0x61, 0xb0, 0x12,
    0x61, 0xb1, 0xcc,
    0x61, 0xb2, 0xeb,
    0x61, 0xb3, 0xd2,
    0x61, 0xb4, 0x1a,
    0x61, 0xb5, 0x12,
    0x61, 0xb6, 0xcc,
    0x61, 0xb7, 0xeb,
    0x61, 0xb8, 0xd2,
    0x61, 0xb9, 0x1a,
    0x61, 0xba, 0x12,
    0x61, 0xbb, 0xcc,
    0x61, 0xbc, 0xeb,
    0x61, 0xbd, 0xd2,
    0x61, 0xbe, 0xd5,
    0x61, 0xbf, 0x00,
    0x61, 0xc0, 0x00,
    0x61, 0xc1, 0x1a,
    0x61, 0xc2, 0xcc,
    0x61, 0xc3, 0xf0,
    0x61, 0xc4, 0x12,
    0x61, 0xc5, 0xd2,
    0x61, 0xc6, 0xd5,
    0x61, 0xc7, 0x00,
    0x61, 0xc8, 0x00,
    0x61, 0xc9, 0x1a,
    0x61, 0xca, 0xcc,
    0x61, 0xcb, 0xf0,
    0x61, 0xcc, 0x12,
    0x61, 0xcd, 0xd2,
    0x61, 0xce, 0x1a,
    0x61, 0xcf, 0xcc,
    0x61, 0xd0, 0xf0,
    0x61, 0xd1, 0x12,
    0x61, 0xd2, 0xd2,
    0x61, 0xd3, 0x1a,
    0x61, 0xd4, 0xcc,
    0x61, 0xd5, 0xf0,
    0x61, 0xd6, 0x12,
    0x61, 0xd7, 0xd2,
    0x61, 0xd8, 0xd5,
    0x64, 0x00, 0x00,
    0x64, 0x01, 0x08,
    0x64, 0x02, 0x00,
    0x64, 0x03, 0xff,
    0x64, 0x04, 0x04,
    0x64, 0x05, 0x61,
    0x64, 0x06, 0x04,
    0x64, 0x07, 0x70,
    0x64, 0x08, 0x00,
    0x64, 0x09, 0xff,
    0x64, 0x0a, 0x05,
    0x64, 0x0b, 0x14,
    0x64, 0x0c, 0x04,
    0x64, 0x0d, 0x70,
    0x64, 0x0e, 0x05,
    0x64, 0x0f, 0x74,
    0x64, 0x10, 0x00,
    0x64, 0x11, 0xff,
    0x64, 0x12, 0x05,
    0x64, 0x13, 0x54,
    0x64, 0x14, 0x04,
    0x64, 0x15, 0x30,
    0x64, 0x16, 0x05,
    0x64, 0x17, 0x44,
    0x64, 0x18, 0x05,
    0x64, 0x19, 0x47,
    0x64, 0x1a, 0x00,
    0x64, 0x1b, 0xff,
    0x64, 0x1c, 0x04,
    0x64, 0x1d, 0x31,
    0x64, 0x1e, 0x04,
    0x64, 0x1f, 0x30,
    0x64, 0x20, 0x00,
    0x64, 0x21, 0xff,
    0x64, 0x22, 0x04,
    0x64, 0x23, 0x20,
    0x64, 0x24, 0x05,
    0x64, 0x25, 0x06,
    0x64, 0x26, 0x00,
    0x64, 0x27, 0xff,
    0x64, 0x28, 0x08,
    0x64, 0x29, 0x29,
    0x64, 0x2a, 0x08,
    0x64, 0x2b, 0x30,
    0x64, 0x2c, 0x00,
    0x64, 0x2d, 0xff,
    0x64, 0x2e, 0x08,
    0x64, 0x2f, 0x29,
    0x64, 0x30, 0x08,
    0x64, 0x31, 0x30,
    0x64, 0x32, 0x06,
    0x64, 0x33, 0x20,
    0x64, 0x34, 0x07,
    0x64, 0x35, 0x00,
    0x64, 0x36, 0x08,
    0x64, 0x37, 0x3f,
    0x64, 0x38, 0x00,
    0x64, 0x39, 0xff,
    0x64, 0x3a, 0x08,
    0x64, 0x3b, 0x29,
    0x64, 0x3c, 0x08,
    0x64, 0x3d, 0x35,
    0x64, 0x3e, 0x06,
    0x64, 0x3f, 0x10,
    0x64, 0x40, 0x07,
    0x64, 0x41, 0x00,
    0x64, 0x42, 0x08,
    0x64, 0x43, 0x3f,
    0x64, 0x44, 0x00,
    0x64, 0x45, 0xff,
    0x64, 0x46, 0x08,
    0x64, 0x47, 0x29,
    0x64, 0x48, 0x08,
    0x64, 0x49, 0x3a,
    0x64, 0x4a, 0x06,
    0x64, 0x4b, 0x00,
    0x64, 0x4c, 0x07,
    0x64, 0x4d, 0x00,
    0x64, 0x4e, 0x08,
    0x64, 0x4f, 0x3f,
    0x64, 0x50, 0x00,
    0x64, 0x51, 0xff,
    0x64, 0x52, 0x06,
    0x64, 0x53, 0x00,
    0x64, 0x54, 0x07,
    0x64, 0x55, 0x05,
    0x64, 0x56, 0x01,
    0x64, 0x57, 0xaf,
    0x64, 0x58, 0x01,
    0x64, 0x59, 0x0f,
    0x64, 0x5a, 0x01,
    0x64, 0x5b, 0x90,
    0x64, 0x5c, 0x01,
    0x64, 0x5d, 0xc8,
    0x64, 0x5e, 0x00,
    0x64, 0x5f, 0xff,
    0x64, 0x60, 0x01,
    0x64, 0x61, 0xac,
    0x64, 0x62, 0x01,
    0x64, 0x63, 0x0c,
    0x64, 0x64, 0x01,
    0x64, 0x65, 0x90,
    0x64, 0x66, 0x01,
    0x64, 0x67, 0xe8,
    0x64, 0x68, 0x00,
    0x64, 0x69, 0xff,
    0x64, 0x6a, 0x01,
    0x64, 0x6b, 0xad,
    0x64, 0x6c, 0x01,
    0x64, 0x6d, 0x0d,
    0x64, 0x6e, 0x01,
    0x64, 0x6f, 0x90,
    0x64, 0x70, 0x01,
    0x64, 0x71, 0xe8,
    0x64, 0x72, 0x00,
    0x64, 0x73, 0xff,
    0x64, 0x74, 0x01,
    0x64, 0x75, 0xae,
    0x64, 0x76, 0x01,
    0x64, 0x77, 0x0e,
    0x64, 0x78, 0x01,
    0x64, 0x79, 0x90,
    0x64, 0x7a, 0x01,
    0x64, 0x7b, 0xe8,
    0x64, 0x7c, 0x00,
    0x64, 0x7d, 0xff,
    0x64, 0x7e, 0x01,
    0x64, 0x7f, 0xb0,
    0x64, 0x80, 0x01,
    0x64, 0x81, 0xb1,
    0x64, 0x82, 0x01,
    0x64, 0x83, 0xb2,
    0x64, 0x84, 0x01,
    0x64, 0x85, 0xb3,
    0x64, 0x86, 0x01,
    0x64, 0x87, 0xb4,
    0x64, 0x88, 0x01,
    0x64, 0x89, 0xb5,
    0x64, 0x8a, 0x01,
    0x64, 0x8b, 0xb6,
    0x64, 0x8c, 0x01,
    0x64, 0x8d, 0xb7,
    0x64, 0x8e, 0x01,
    0x64, 0x8f, 0xb8,
    0x64, 0x90, 0x01,
    0x64, 0x91, 0xb9,
    0x64, 0x92, 0x01,
    0x64, 0x93, 0xba,
    0x64, 0x94, 0x01,
    0x64, 0x95, 0xbb,
    0x64, 0x96, 0x01,
    0x64, 0x97, 0xbc,
    0x64, 0x98, 0x01,
    0x64, 0x99, 0xbd,
    0x64, 0x9a, 0x01,
    0x64, 0x9b, 0xbe,
    0x64, 0x9c, 0x01,
    0x64, 0x9d, 0xbf,
    0x64, 0x9e, 0x01,
    0x64, 0x9f, 0xc0,
    0x64, 0xa0, 0x00,
    0x64, 0xa1, 0xff,
    0x64, 0xa2, 0x06,
    0x64, 0xa3, 0x00,
    0x64, 0xa4, 0x01,
    0x64, 0xa5, 0xf6,
    0x64, 0xa6, 0x00,
    0x64, 0xa7, 0xff,
    0x64, 0xa8, 0x06,
    0x64, 0xa9, 0x10,
    0x64, 0xaa, 0x01,
    0x64, 0xab, 0xf6,
    0x64, 0xac, 0x06,
    0x64, 0xad, 0x00,
    0x64, 0xae, 0x00,
    0x64, 0xaf, 0xff,
    0x64, 0xb0, 0x06,
    0x64, 0xb1, 0x20,
    0x64, 0xb2, 0x01,
    0x64, 0xb3, 0xf6,
    0x64, 0xb4, 0x06,
    0x64, 0xb5, 0x00,
    0x64, 0xb6, 0x00,
    0x64, 0xb7, 0xff,
    0x64, 0xb8, 0x04,
    0x64, 0xb9, 0x31,
    0x64, 0xba, 0x04,
    0x64, 0xbb, 0x30,
    0x64, 0xbc, 0x01,
    0x64, 0xbd, 0x20,
    0x64, 0xbe, 0x01,
    0x64, 0xbf, 0x31,
    0x64, 0xc0, 0x01,
    0x64, 0xc1, 0x32,
    0x64, 0xc2, 0x01,
    0x64, 0xc3, 0x33,
    0x64, 0xc4, 0x01,
    0x64, 0xc5, 0x34,
    0x64, 0xc6, 0x01,
    0x64, 0xc7, 0x35,
    0x64, 0xc8, 0x01,
    0x64, 0xc9, 0x36,
    0x64, 0xca, 0x01,
    0x64, 0xcb, 0x37,
    0x64, 0xcc, 0x01,
    0x64, 0xcd, 0x38,
    0x64, 0xce, 0x01,
    0x64, 0xcf, 0x39,
    0x64, 0xd0, 0x01,
    0x64, 0xd1, 0x3a,
    0x64, 0xd2, 0x01,
    0x64, 0xd3, 0x3b,
    0x64, 0xd4, 0x01,
    0x64, 0xd5, 0x3c,
    0x64, 0xd6, 0x01,
    0x64, 0xd7, 0x3d,
    0x64, 0xd8, 0x01,
    0x64, 0xd9, 0x3e,
    0x64, 0xda, 0x01,
    0x64, 0xdb, 0x3f,
    0x64, 0xdc, 0x02,
    0x64, 0xdd, 0xa0,
    0x64, 0xde, 0x00,
    0x64, 0xdf, 0xff,
    0x64, 0xe0, 0x04,
    0x64, 0xe1, 0x31,
    0x64, 0xe2, 0x04,
    0x64, 0xe3, 0x30,
    0x64, 0xe4, 0x01,
    0x64, 0xe5, 0x00,
    0x64, 0xe6, 0x01,
    0x64, 0xe7, 0x11,
    0x64, 0xe8, 0x01,
    0x64, 0xe9, 0x12,
    0x64, 0xea, 0x01,
    0x64, 0xeb, 0x13,
    0x64, 0xec, 0x01,
    0x64, 0xed, 0x14,
    0x64, 0xee, 0x01,
    0x64, 0xef, 0x15,
    0x64, 0xf0, 0x01,
    0x64, 0xf1, 0x16,
    0x64, 0xf2, 0x01,
    0x64, 0xf3, 0x17,
    0x64, 0xf4, 0x01,
    0x64, 0xf5, 0x18,
    0x64, 0xf6, 0x01,
    0x64, 0xf7, 0x19,
    0x64, 0xf8, 0x01,
    0x64, 0xf9, 0x1a,
    0x64, 0xfa, 0x01,
    0x64, 0xfb, 0x1b,
    0x64, 0xfc, 0x01,
    0x64, 0xfd, 0x1c,
    0x64, 0xfe, 0x01,
    0x64, 0xff, 0x1d,
    0x65, 0x00, 0x01,
    0x65, 0x01, 0x1e,
    0x65, 0x02, 0x01,
    0x65, 0x03, 0x1f,
    0x65, 0x04, 0x02,
    0x65, 0x05, 0xa0,
    0x65, 0x06, 0x00,
    0x65, 0x07, 0xff,
    0x65, 0x08, 0x03,
    0x65, 0x09, 0x0b,
    0x65, 0x0a, 0x05,
    0x65, 0x0b, 0x86,
    0x65, 0x0c, 0x00,
    0x65, 0x0d, 0x00,
    0x65, 0x0e, 0x05,
    0x65, 0x0f, 0x06,
    0x65, 0x10, 0x00,
    0x65, 0x11, 0x04,
    0x65, 0x12, 0x05,
    0x65, 0x13, 0x04,
    0x65, 0x14, 0x00,
    0x65, 0x15, 0x04,
    0x65, 0x16, 0x05,
    0x65, 0x17, 0x00,
    0x65, 0x18, 0x05,
    0x65, 0x19, 0x08,
    0x65, 0x1a, 0x03,
    0x65, 0x1b, 0x9a,
    0x65, 0x1c, 0x05,
    0x65, 0x1d, 0x86,
    0x65, 0x1e, 0x00,
    0x65, 0x1f, 0x00,
    0x65, 0x20, 0x05,
    0x65, 0x21, 0x06,
    0x65, 0x22, 0x00,
    0x65, 0x23, 0x01,
    0x65, 0x24, 0x05,
    0x65, 0x25, 0x04,
    0x65, 0x26, 0x00,
    0x65, 0x27, 0x04,
    0x65, 0x28, 0x05,
    0x65, 0x29, 0x00,
    0x65, 0x2a, 0x05,
    0x65, 0x2b, 0x08,
    0x65, 0x2c, 0x03,
    0x65, 0x2d, 0x99,
    0x65, 0x2e, 0x05,
    0x65, 0x2f, 0x06,
    0x65, 0x30, 0x00,
    0x65, 0x31, 0x00,
    0x65, 0x32, 0x05,
    0x65, 0x33, 0x04,
    0x65, 0x34, 0x00,
    0x65, 0x35, 0x04,
    0x65, 0x36, 0x05,
    0x65, 0x37, 0x00,
    0x65, 0x38, 0x05,
    0x65, 0x39, 0x08,
    0x65, 0x3a, 0x03,
    0x65, 0x3b, 0x98,
    0x65, 0x3c, 0x05,
    0x65, 0x3d, 0x06,
    0x65, 0x3e, 0x00,
    0x65, 0x3f, 0x00,
    0x65, 0x40, 0x05,
    0x65, 0x41, 0x04,
    0x65, 0x42, 0x00,
    0x65, 0x43, 0x04,
    0x65, 0x44, 0x05,
    0x65, 0x45, 0x00,
    0x65, 0x46, 0x05,
    0x65, 0x47, 0x08,
    0x65, 0x48, 0x03,
    0x65, 0x49, 0x97,
    0x65, 0x4a, 0x05,
    0x65, 0x4b, 0x06,
    0x65, 0x4c, 0x05,
    0x65, 0x4d, 0x04,
    0x65, 0x4e, 0x00,
    0x65, 0x4f, 0x04,
    0x65, 0x50, 0x05,
    0x65, 0x51, 0x00,
    0x65, 0x52, 0x05,
    0x65, 0x53, 0x08,
    0x65, 0x54, 0x03,
    0x65, 0x55, 0x96,
    0x65, 0x56, 0x05,
    0x65, 0x57, 0x06,
    0x65, 0x58, 0x05,
    0x65, 0x59, 0x04,
    0x65, 0x5a, 0x00,
    0x65, 0x5b, 0x04,
    0x65, 0x5c, 0x05,
    0x65, 0x5d, 0x00,
    0x65, 0x5e, 0x05,
    0x65, 0x5f, 0x08,
    0x65, 0x60, 0x03,
    0x65, 0x61, 0x95,
    0x65, 0x62, 0x05,
    0x65, 0x63, 0x06,
    0x65, 0x64, 0x05,
    0x65, 0x65, 0x04,
    0x65, 0x66, 0x00,
    0x65, 0x67, 0x04,
    0x65, 0x68, 0x05,
    0x65, 0x69, 0x00,
    0x65, 0x6a, 0x05,
    0x65, 0x6b, 0x08,
    0x65, 0x6c, 0x03,
    0x65, 0x6d, 0x94,
    0x65, 0x6e, 0x05,
    0x65, 0x6f, 0x06,
    0x65, 0x70, 0x00,
    0x65, 0x71, 0x00,
    0x65, 0x72, 0x05,
    0x65, 0x73, 0x04,
    0x65, 0x74, 0x00,
    0x65, 0x75, 0x04,
    0x65, 0x76, 0x05,
    0x65, 0x77, 0x00,
    0x65, 0x78, 0x05,
    0x65, 0x79, 0x08,
    0x65, 0x7a, 0x03,
    0x65, 0x7b, 0x93,
    0x65, 0x7c, 0x05,
    0x65, 0x7d, 0x06,
    0x65, 0x7e, 0x00,
    0x65, 0x7f, 0x00,
    0x65, 0x80, 0x05,
    0x65, 0x81, 0x04,
    0x65, 0x82, 0x00,
    0x65, 0x83, 0x04,
    0x65, 0x84, 0x05,
    0x65, 0x85, 0x00,
    0x65, 0x86, 0x05,
    0x65, 0x87, 0x08,
    0x65, 0x88, 0x03,
    0x65, 0x89, 0x92,
    0x65, 0x8a, 0x05,
    0x65, 0x8b, 0x06,
    0x65, 0x8c, 0x05,
    0x65, 0x8d, 0x04,
    0x65, 0x8e, 0x00,
    0x65, 0x8f, 0x04,
    0x65, 0x90, 0x05,
    0x65, 0x91, 0x00,
    0x65, 0x92, 0x05,
    0x65, 0x93, 0x08,
    0x65, 0x94, 0x03,
    0x65, 0x95, 0x91,
    0x65, 0x96, 0x05,
    0x65, 0x97, 0x06,
    0x65, 0x98, 0x05,
    0x65, 0x99, 0x04,
    0x65, 0x9a, 0x00,
    0x65, 0x9b, 0x04,
    0x65, 0x9c, 0x05,
    0x65, 0x9d, 0x00,
    0x65, 0x9e, 0x05,
    0x65, 0x9f, 0x08,
    0x65, 0xa0, 0x03,
    0x65, 0xa1, 0x90,
    0x65, 0xa2, 0x05,
    0x65, 0xa3, 0x06,
    0x65, 0xa4, 0x05,
    0x65, 0xa5, 0x04,
    0x65, 0xa6, 0x00,
    0x65, 0xa7, 0x04,
    0x65, 0xa8, 0x05,
    0x65, 0xa9, 0x00,
    0x65, 0xaa, 0x05,
    0x65, 0xab, 0x08,
    0x65, 0xac, 0x02,
    0x65, 0xad, 0x90,
    0x65, 0xae, 0x05,
    0x65, 0xaf, 0x06,
    0x65, 0xb0, 0x00,
    0x65, 0xb1, 0xff,
    0x65, 0xb2, 0x04,
    0x65, 0xb3, 0x20,
    0x65, 0xb4, 0x05,
    0x65, 0xb5, 0x06,
    0x65, 0xb6, 0x08,
    0x65, 0xb7, 0x84,
    0x65, 0xb8, 0x04,
    0x65, 0xb9, 0x04,
    0x65, 0xba, 0x00,
    0x65, 0xbb, 0xff,
    0x65, 0xbc, 0x08,
    0x65, 0xbd, 0x72,
    0x65, 0xbe, 0x04,
    0x65, 0xbf, 0x0c,
    0x65, 0xc0, 0x04,
    0x65, 0xc1, 0x04,
    0x65, 0xc2, 0x00,
    0x65, 0xc3, 0xff,
    0x65, 0xc4, 0x04,
    0x65, 0xc5, 0x45,
    0x65, 0xc6, 0x04,
    0x65, 0xc7, 0x54,
    0x65, 0xc8, 0x08,
    0x65, 0xc9, 0x72,
    0x65, 0xca, 0x00,
    0x65, 0xcb, 0xff,
    0x65, 0xcc, 0x04,
    0x65, 0xcd, 0x20,
    0x65, 0xce, 0x05,
    0x65, 0xcf, 0x06,
    0x65, 0xd0, 0x08,
    0x65, 0xd1, 0x96,
    0x65, 0xd2, 0x08,
    0x65, 0xd3, 0x5e,
    0x65, 0xd4, 0x00,
    0x65, 0xd5, 0xff,
    0x65, 0xd6, 0x04,
    0x65, 0xd7, 0x20,
    0x65, 0xd8, 0x05,
    0x65, 0xd9, 0x06,
    0x65, 0xda, 0x08,
    0x65, 0xdb, 0x96,
    0x65, 0xdc, 0x08,
    0x65, 0xdd, 0x5c,
    0x65, 0xde, 0x00,
    0x65, 0xdf, 0xff,
    0x65, 0xe0, 0x04,
    0x65, 0xe1, 0x20,
    0x65, 0xe2, 0x05,
    0x65, 0xe3, 0x06,
    0x65, 0xe4, 0x08,
    0x65, 0xe5, 0x84,
    0x65, 0xe6, 0x08,
    0x65, 0xe7, 0x70,
    0x65, 0xe8, 0x00,
    0x65, 0xe9, 0xff,
    0x65, 0xea, 0x00,
    0x65, 0xeb, 0xff,
    0x65, 0xec, 0x00,
    0x65, 0xed, 0xff,

    
    0x30, 0xeb, 0x04,
    0x30, 0xed, 0x5a,
    0x30, 0xee, 0x01,
    0x30, 0xef, 0x80,
    0x30, 0xf1, 0x5a,
    0x30, 0x3a, 0x04,
    0x30, 0x3b, 0x7f,
    0x30, 0x3c, 0xfe,
    0x30, 0x3d, 0x19,
    0x30, 0x3e, 0xd7,
    0x30, 0x3f, 0x09,
    0x30, 0x40, 0x78,
    0x30, 0x42, 0x05,
    0x32, 0x8a, 0x00,
    0x31, 0xbf, 0x9f,
    0x31, 0xc0, 0xff,


    0x30, 0x12, 0x00,
    0x31, 0x19, 0x54,  //12 bit cmbined mode, MIPI


#ifdef OV10640_1288x728x30fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x00b6
#define V_ROI_END   0x038d

    0x30, 0x00, 0x6 ,
    0x30, 0x01, 0x78,
    0x30, 0x02, 0x7 ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x54,
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x2 ,
    0x30, 0x7f, 0xd8,
    0x30, 0x80, 0xb ,  // 0xafe
    0x30, 0x81, 0x72,  // HMAX= 
    0x30, 0x82, 0x3 ,  // 0x2ea
    0x30, 0x83, 0x0 ,  // VMAX= 746
    0x34, 0x6d, 0x15,  // 1b, PCLK

#endif

#ifdef OV10640_1288x728x25fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x00b6
#define V_ROI_END   0x038d

    0x30, 0x00, 0x6 ,
    0x30, 0x01, 0x6c,
    0x30, 0x02, 0x8 ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x48,
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x2 ,
    0x30, 0x7f, 0xd8,
    0x30, 0x80, 0xa ,  // 0xafa, 0xaec, 0xad2 
    0x30, 0x81, 0xfa,  // HMAX= 2810 0xd2
    0x30, 0x82, 0x3 ,  // 0x301
    0x30, 0x83, 0x1 ,  // VMAX= 769
    0x34, 0x6d, 0x18,  // PCLK

#endif

#ifdef OV10640_1288x728x22fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x00b6
#define V_ROI_END   0x038d

    0x30, 0x00, 0x3 ,
    0x30, 0x01, 0x48,
    0x30, 0x02, 0xe ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x48,
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x2 ,
    0x30, 0x7f, 0xd8,
    0x30, 0x80, 0xa ,  // a48
    0x30, 0x81, 0x48,  // HTS= 2632 
    0x30, 0x82, 0x2 ,  // minimum value
    0x30, 0x83, 0xea,  // VTS= 746
    0x34, 0x6d, 0x18,  // PCLK
#endif

#ifdef OV10640_1288x728x20fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x00b6
#define V_ROI_END   0x038d

    0x30, 0x00, 0x3 ,
    0x30, 0x01, 0x48,
    0x30, 0x02, 0xf ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x54,
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x2 ,
    0x30, 0x7f, 0xd8,
    0x30, 0x80, 0xa ,  // ba9b
    0x30, 0x81, 0x41,  // HTS= 2715
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0x3 ,  // VTS= 746
    0x34, 0x6d, 0x15,  // PCLK
#endif

#ifdef OV10640_1288x728x12dot5fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x00b6
#define V_ROI_END   0x038d

    0x30, 0x00, 0x6 ,
    0x30, 0x01, 0x44,
    0x30, 0x02, 0x8 ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x48,
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x2 ,
    0x30, 0x7f, 0xd8,
    0x30, 0x80, 0x0d ,  // ba9b
    0x30, 0x81, 0xd0,  // HTS= 2715
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0x1 ,  // VTS= 769
    0x34, 0x6d, 0x18,  // PCLK
#endif

#ifdef OV10640_1288x968x30fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x003e
#define V_ROI_END   0x0405

    0x30, 0x00, 0x3 ,
    0x30, 0x01, 0x57,
    0x30, 0x02, 0x9 ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x30,  //5c
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x3 ,
    0x30, 0x7f, 0xc8,
    0x30, 0x80, 0xc ,  // a15
    0x30, 0x81, 0x15,  // HMAX= 
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0xf3,  // VMAX= 986
    0x34, 0x6d, 0x25,  // PCLK

#endif

#ifdef OV10640_1288x968x25fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x003e
#define V_ROI_END   0x0405

    0x30, 0x00, 0x3 ,
    0x30, 0x01, 0x57,
    0x30, 0x02, 0xb ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x30,  //5c
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x3 ,
    0x30, 0x7f, 0xc8,
    0x30, 0x80, 0xa ,  // a15
    0x30, 0x81, 0x15,  // HMAX= 
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0xf3,  // VMAX= 986
    0x34, 0x6d, 0x25,  // PCLK

#endif
#ifdef OV10640_1288x968x22fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x003e
#define V_ROI_END   0x0405

    0x30, 0x00, 0x4 ,
    0x30, 0x01, 0x70,
    0x30, 0x02, 0xd ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x30,  //5c
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x3 ,
    0x30, 0x7f, 0xc8,
    0x30, 0x80, 0x9 ,  // 926 8b4  // should be 976
    0x30, 0x81, 0x76,  // HMAX= 2422
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0xf5,  // VMAX= 986
    0x34, 0x6d, 0x18,  // PCLK

#endif

#ifdef OV10640_1288x968x20fps
#if defined (__CAMCONF)
#error "configuration error... multiple configurations selected"
#endif
#define __CAMCONF
#define V_ROI_START 0x003e
#define V_ROI_END   0x0405

    0x30, 0x00, 0x4 ,
    0x30, 0x01, 0x70,
    0x30, 0x02, 0xd ,
    0x30, 0x04, 0x3 ,
    0x30, 0x05, 0x30,  //5c
    0x30, 0x06, 0x7 ,
    0x30, 0x8f, 0x40,
    0x31, 0x27, 0x23,
    0x30, 0x74, 0x0 ,
    0x30, 0x75, 0x0 ,
    //0x30, 0x76, (V_ROI_START >>8) & 0xff,
    //0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x78, 0x5 ,
    0x30, 0x79, 0x7 ,
    //0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    //0x30, 0x7b, (V_ROI_END      ) & 0xff,
    0x30, 0x7c, 0x5 ,
    0x30, 0x7d, 0x8 ,
    0x30, 0x7e, 0x3 ,
    0x30, 0x7f, 0xc8,
    0x30, 0x80, 0xb ,  // a6e
    0x30, 0x81, 0x6e,  // HMAX= 2422
    0x30, 0x82, 0x3 ,  // minimum value
    0x30, 0x83, 0xf3,  // VMAX= 986
    0x34, 0x6d, 0x25,  // PCLK
#endif

#if defined (__CAMCONF)
#undef __CAMCONF
#else
#error "configuration error... no configuration selected"
#endif
 
    // Set Vertical ROI
    0x30, 0x76, (V_ROI_START >>8) & 0xff,
    0x30, 0x77, (V_ROI_START    ) & 0xff,
    0x30, 0x7a, (V_ROI_END   >>8) & 0xff,
    0x30, 0x7b, (V_ROI_END      ) & 0xff,

    //// Set Exposure ROI
    0x30, 0xf2, 0x00,   // confirmed with OVT
    0x30, 0xf3, 0x00,
    0x30, 0xf6, ((V_ROI_END - V_ROI_START -7) >>8) & 0xff,
    0x30, 0xf7, ((V_ROI_END - V_ROI_START -7)    ) & 0xff,
    0x30, 0xf4, 0x00,  // XMIN = 0
    0x30, 0xf5, 0x00,
    0x30, 0xf8, 0x05,  // XMAX = 1288-8
    0x30, 0xf9, 0x00,

    // ROI for statistic engine
    0x40, 0x00, 0x00,
    0x40, 0x01, 0x00,
    0x40, 0x04, ((V_ROI_END - V_ROI_START -7) >>8) & 0xff,
    0x40, 0x05, ((V_ROI_END - V_ROI_START -7)    ) & 0xff,
    0x40, 0x02, 0x00,  // XMIN = 0
    0x40, 0x03, 0x04,
    0x40, 0x06, 0x05,  // XMAX = 1288-8
    0x40, 0x07, 0x00,

    //// ISP geometry
    0x30, 0x84, 0x0 ,  // horizontal offset
    0x30, 0x85, 0x0 ,
    0x30, 0x86, 0x0 ,  // vertical offset
    0x30, 0x87, 0x0 ,

    //
    0x34, 0x44, 0x28,  // 2 MIPI lanes
    //0x30, 0x91, 0x0c,  // embedded lines are on
    0x30, 0x91, 0x0 ,  // embedded lines are off 

    // 12b combined mode
    0x31, 0x19, 0x54,

    //white ballancing

    //0x31, 0x27, 0x63,
  }; //Ov10640_MIPI_basic_configuration_2MIPI_lane_12bcombined

static uint8_t OV10640_3x12[] =
  {

    // PLL 
    // 0x30, 0x00, 0x3 ,
    // 0x30, 0x01, 0x38,
    // 0x30, 0x02, 0x7 ,
    // 0x30, 0x04, 0x3 ,
    // 0x30, 0x05, 0x50,
    // 0x30, 0x06, 0x7 ,
    // 0x30, 0x8f, 0x40,
    // 0x31, 0x27, 0x3 ,
    // 0x30, 0x74, 0x0 ,
    // 0x30, 0x75, 0x0 ,
    // 0x30, 0x76, 0x0 ,
    // 0x30, 0x77, 0xB5,
    // 0x30, 0x78, 0x5 ,
    // 0x30, 0x79, 0x7 ,
    // 0x30, 0x7a, 0x3 ,
    // 0x30, 0x7b, 0x8D,

    // move up by 1 line
    // Set Vertical ROI
 #define Y_OFFSET 0 // it was 1
    0x30, 0x76, ((V_ROI_START+Y_OFFSET) >>8) & 0xff,
    0x30, 0x77, ((V_ROI_START+Y_OFFSET)    ) & 0xff,
    0x30, 0x7a, ((V_ROI_END+Y_OFFSET)   >>8) & 0xff,
    0x30, 0x7b, ((V_ROI_END+Y_OFFSET)      ) & 0xff,

    //0x30, 0x77, 0xb6, // ... L (=182 = (1092-728)/2)
    //0x30, 0x7b, 0x8e, // ... L (910=182-1+729)

    //0x31, 0x28, 0xc0, // ISP flip offset: flip[1], mirror[0] (0x3), manual buffer???

    // select 3x12 mode
    0x31, 0x19, 0x50,


  }; //OV10640_3x12




static uint8_t Ov10640_AEC_ON[] =
  {



    //AEC ON

#if defined(AEC_OLD)
    //// expo_calc_ctrl 1 & 2: all auto, ex dgain
    //0x70, 0x01, 0xff,  // long:  cg=auto, dgain=auto, again=auto, expo=auto
    //0x70, 0x00, 0x3f,  // short: cg=off,  dgain=auto, again=auto, expo=auto
    //0x70, 0x03, 0xff,  // vshrt: cg=auto, dgain=auto, again=auto, expo=auto
    ////0x70, 0x01, 0x45,  // long:  cg=on, dgain=off, again=on, expo=on
    ////0x70, 0x00, 0x45,  // short: cg=on, dgain=off, again=on, expo=on
    ////0x70, 0x03, 0x45,  // vshrt: cg=on, dgain=off, again=on, expo=on
    //// OVT settings
    ////0x70, 0x01, 0xdf,  // long = auto expo, again and cg. dgain on
    ////0x70, 0x00, 0x1f,  // short = auto expo and again. cg off. dgain on
    ////0x70, 0x03, 0xdf,  // very short = auto expo, again and cg. dgain on
    ////0x70, 0x02, 0xa8,  // bright align
    //0x70, 0x02, 0xaa,  // dark align
    //// no auto
    ////0x70, 0x01, 0x55,  // long 
    ////0x70, 0x00, 0x15,  // short
    ////0x70, 0x03, 0x55,  // very short
    //// longest targets
    //0x70, 0x04, 0x13,  // max_target_h
    //0x70, 0x05, 0xec,  // max_target_l
    //0x70, 0x06, 0x00,  // min_target_h
    //0x70, 0x07, 0x64,  // min_target_l
    //0x70, 0x08, 0x13,  // bin0_target_h
    //0x70, 0x09, 0xec,  // bin0_target_l
    //0x70, 0x0A, 0x27,  // hist_target_h
    //0x70, 0x0B, 0xd8,  // hist_target_l
    //0x70, 0x0e, 0x80,  // emwa_alfa_l
    //0x70, 0x0f, 0x60,  // emwa_alfa_h
    //// shortest targets
    //0x70, 0x1a, 0x13,  // max_target_h
    //0x70, 0x1b, 0xec,  // max_target_l
    //0x70, 0x1c, 0x00,  // min_target_h
    //0x70, 0x1d, 0x64,  // min_target_l
    //0x70, 0x1e, 0x13,  // bin0_target_h
    //0x70, 0x1f, 0xec,  // bin0_target_l
    //0x70, 0x20, 0x27,  // hist_target_h
    //0x70, 0x21, 0xd8,  // hist_target_l
    //0x70, 0x24, 0x80,  // emwa_alfa_h
    //0x70, 0x25, 0x60,  // emwa_alfa_l
    //// absolute minimum value for analog gain
    //0x70, 0x48, 0x01,
    //// long digital gain x1 - x1/4
    //0x70, 0x4a, 0x01,  // dgain_max_reg_h
    //0x70, 0x4b, 0x20,  // dgain_max_reg_l
    //0x70, 0x4c, 0x01,  // dgain_min_reg_h
    //0x70, 0x4d, 0x00,  // dgain_min_reg_l
    //// short digital gain x8 - x1/4
    //0x70, 0x84, 0x01,  // again_min_max_reg
    //0x70, 0x86, 0x01,  // dgain_max_reg_h
    //0x70, 0x87, 0x20,  // dgain_max_reg_l
    //0x70, 0x88, 0x01,  // dgain_max_reg_h
    //0x70, 0x89, 0x00,  // dgain_max_reg_l
    //// very short digital gain x8 - x1
    //0x70, 0xc0, 0x01,  // again_min_max_reg
    //0x70, 0xc2, 0x08,  // dgain_max_reg_h
    //0x70, 0xc3, 0x20,  // dgain_max_reg_l
    //0x70, 0xc4, 0x01,  // dgain_max_reg_h
    //0x70, 0xc5, 0x00,  // dgain_max_reg_l
    //
    //// long expo time boundaries
    //0x70, 0x42, 0x00,  // d_expo_max_reg_3 (24.8)
    //0x70, 0x43, 0x03,  // d_expo_max_reg_2 
    ////0x70, 0x43, ((V_ROI_END - V_ROI_START)  >>8) & 0xff,  // d_expo_max_reg_2 
    //0x70, 0x40, 0xe8,  // d_expo_max_reg_1 
    ////0x70, 0x40, ((V_ROI_END - V_ROI_START)     ) & 0xff,  // d_expo_max_reg_1 
    //0x70, 0x41, 0x00,  // d_expo_max_reg_0 
    //
    //0x70, 0x46, 0x00,  // d_expo_min_reg_3 
    //0x70, 0x47, 0x00,  // d_expo_min_reg_2 
    //0x70, 0x44, 0x04,  // d_expo_min_reg_1 
    //0x70, 0x45, 0x00,  // d_expo_min_reg_0 
    //
    //// short expo
    //0x70, 0x7c, 0xe8,  // d_expo_max_reg_1 
    //0x70, 0x7d, 0x00,  // d_expo_max_reg_0 
    //0x70, 0x7e, 0x00,  // d_expo_max_reg_3 
    //0x70, 0x7f, 0x03,  // d_expo_max_reg_2 
    //0x70, 0x80, 0x04,  // d_expo_min_reg_1 
    //0x70, 0x81, 0x00,  // d_expo_min_reg_0 
    //0x70, 0x82, 0x00,  // d_expo_min_reg_3 
    //0x70, 0x83, 0x00,  // d_expo_min_reg_2 
    //// very short expo
    //0x70, 0xb8, 0x03,  // d_expo_max_reg_1 
    //0x70, 0xb9, 0xf8,  // d_expo_max_reg_0 
    //0x70, 0xba, 0x00,  // d_expo_max_reg_3 
    //0x70, 0xbb, 0x00,  // d_expo_max_reg_2 
    //0x70, 0xbc, 0x00,  // d_expo_min_reg_1 
    //0x70, 0xbd, 0x88,  // d_expo_min_reg_0 
    //0x70, 0xbe, 0x00,  // d_expo_min_reg_1 
    //0x70, 0xbf, 0x80,  // d_expo_min_reg_0 
    //
    //// absolute max long/short = 1024  // sth is that 24.8?
    //0x70, 0xe6, 0x00,  // d_ratio_max_ls_reg_3 
    //0x70, 0xe7, 0x04,  // d_ratio_max_ls_reg_2 // 0x00
    //0x70, 0xe4, 0x00,  // d_ratio_max_ls_reg_1 // 0x10
    //0x70, 0xe5, 0x00,  // d_ratio_max_ls_reg_0 
    //
    //// absolute min long/short = 64
    //0x70, 0xea, 0x00,  // d_ratio_min_ls_reg_3 
    //0x70, 0xeb, 0x00,  // d_ratio_min_ls_reg_2 
    //0x70, 0xe8, 0x40,  // d_ratio_min_ls_reg_1 // 0x40?
    //0x70, 0xe9, 0x00,  // d_ratio_min_ls_reg_0 
    //
    //
    //// absolute max long/very short = 1024
    //0x70, 0xee, 0x00,  // d_ratio_max_ls_reg_3 
    //0x70, 0xef, 0x04,  // d_ratio_max_ls_reg_2 
    //0x70, 0xec, 0x00,  // d_ratio_max_ls_reg_1 
    //0x70, 0xed, 0x00,  // d_ratio_max_ls_reg_0 
    //
    //// absolute min long/very short = 16
    //0x70, 0xf2, 0x00,  // d_ratio_min_ls_reg_3 
    //0x70, 0xf3, 0x00,  // d_ratio_min_ls_reg_2 
    //0x70, 0xf0, 0x10,  // d_ratio_min_ls_reg_1 
    //0x70, 0xf1, 0x00,  // d_ratio_min_ls_reg_0 
#else //defined AEC_OLD

    // priority and alignement for l,s,vs
    0x70, 0x02, 0xaa,  //  aa= align dark, a8=align bright
    //priorities exposure, conversion gain,
    //analog gain, digital gain

    // *** long exposure
    0x70, 0x01, 0xff,  // long:  cg=auto, dgain=auto, again=auto, expo=auto
    // absolute minimum value for analog gain
    0x70, 0x48, 0x00,  // again_min_reg
    0x70, 0x49, 0x03,  // again_max_reg x8

    0x70, 0x4a, 0x07,  // dgain_max_reg_h // 8.8
    0x70, 0x4b, 0xff,  // dgain_max_reg_l

    0x70, 0x4c, 0x01,  // dgain_min_reg_h // 8.8
    0x70, 0x4d, 0x50,  // dgain_min_reg_l

    // long expo time boundaries
    0x70, 0x42, 0x00,  // d_expo_max_reg_3 (24.8)
    //0x70, 0x43, 0x04,  // d_expo_max_reg_2 
    0x70, 0x43, ((V_ROI_END - V_ROI_START)  >>8) & 0xff,  // d_expo_max_reg_2 
    //0x70, 0x40, 0xec,  // d_expo_max_reg_1 
    0x70, 0x40, ((V_ROI_END - V_ROI_START)     ) & 0xff,  // d_expo_max_reg_1 
    0x70, 0x41, 0x00,  // d_expo_max_reg_0 

    0x70, 0x46, 0x00,  // d_expo_min_reg_3   // 24.8
    0x70, 0x47, 0x00,  // d_expo_min_reg_2 
    //0x70, 0x44, 0x01,  // d_expo_min_reg_1
    0x70, 0x44, 0x04,  // d_expo_min_reg_1 
    0x70, 0x45, 0x00,  // d_expo_min_reg_0 




    // *** short exposure
    0x70, 0x00, 0x1f,  // short: cg=off,  dgain=on, again=auto, expo=auto

    // short digital gain x8 - x1/4
    0x70, 0x84, 0x01,  // again_min_reg must be > 2x to avoid color shadows
    0x70, 0x85, 0x01,  // again_max_reg
    0x70, 0x86, 0x02,  // dgain_max_reg_h
    0x70, 0x87, 0x40,  // dgain_max_reg_l
    0x70, 0x88, 0x01,  // dgain_min_reg_h must be  > 1.5 to avoid color shaodws
    0x70, 0x89, 0x80,  // dgain_min_reg_l

    // short exposure time
    0x70, 0x7e, 0x00,  // d_expo_max_reg_3 (24.8)
    //0x70, 0x7f, 0x04,  // d_expo_max_reg_2 
    0x70, 0x7f, ((V_ROI_END - V_ROI_START)  >>8) & 0xff,  // d_expo_max_reg_2 
    //0x70, 0x7c, 0xec,  // d_expo_max_reg_1 
    0x70, 0x7c, ((V_ROI_END - V_ROI_START)     ) & 0xff,  // d_expo_max_reg_1 
    0x70, 0x7d, 0x00,  // d_expo_max_reg_0 

    0x70, 0x82, 0x00,  // d_expo_min_reg_3 
    //0x70, 0x83, 0x03,  // d_expo_min_reg_2 
    0x70, 0x83, 0x00,  // d_expo_min_reg_2 
    //0x70, 0x80, 0x01,  // d_expo_min_reg_1 
    0x70, 0x80, 0x04,  // d_expo_min_reg_1 
    0x70, 0x81, 0x00,  // d_expo_min_reg_0 


    // *** very short exposure
    //0x70, 0x03, 0xdf,  // vshrt: cg=auto, dgain=auto, again=auto, expo=auto
    0x70, 0x03, 0xc3,  // sth vshrt: cg=auto, dgain=off, again=off, expo=auto
    // very short digital gain x8 - x1
    0x70, 0xc0, 0x00,  // again_min_reg
    //0x70, 0xc1, 0x20,  // 0x20 is invalid?
    0x70, 0xc1, 0x00,  // again_max_reg x1
    //0x70, 0xc2, 0x02,  // dgain_max_reg_h
    0x70, 0xc2, 0x01,  // dgain_max_reg_h x1
    0x70, 0xc3, 0x50,  // dgain_max_reg_l
    0x70, 0xc4, 0x01,  // dgain_min_reg_h
    0x70, 0xc5, 0x50,  // dgain_min_reg_l

    // very short expo
    0x70, 0xba, 0x00,  // d_expo_max_reg_3 (24.8)
    0x70, 0xbb, 0x00,  // d_expo_max_reg_2 
    //0x70, 0xb8, 0x03,  // d_expo_max_reg_1 
    //0x70, 0xb9, 0x98,  // d_expo_max_reg_0 
    0x70, 0xb8, 0x07,  // d_expo_max_reg_1 
    0x70, 0xb9, 0xff,  // d_expo_max_reg_0 

    0x70, 0xbe, 0x00,  // d_expo_min_reg_3 
    0x70, 0xbf, 0x00,  // d_expo_min_reg_2 
    0x70, 0xbc, 0x00,  // d_expo_min_reg_1 
    0x70, 0xbd, 0x80,  // d_expo_min_reg_0 

    // *** control algorithm settings
    // longest targets
    //0x70, 0x04, 0x02,  // max_target_h
    //0x70, 0x05, 0x00,  // max_target_l
    //0x70, 0x06, 0x01,  // min_target_h
    //0x70, 0x07, 0x80,  // min_target_l
    //0x70, 0x08, 0x02,  // bin0_target_h
    //0x70, 0x09, 0x00,  // bin0_target_l
    //0x70, 0x0A, 0x04,  // hist_target_h
    //0x70, 0x0B, 0x00,  // hist_target_l

    0x70, 0x04, 0x40,  // max_target_h
    0x70, 0x05, 0x00,  // max_target_l
    0x70, 0x06, 0x20,  // min_target_h
    0x70, 0x07, 0x00,  // min_target_l
    0x70, 0x08, 0x20,  // bin0_target_h
    0x70, 0x09, 0x00,  // bin0_target_l
    0x70, 0x0A, 0x40,  // hist_target_h
    0x70, 0x0B, 0x00,  // hist_target_l

    //0x70, 0x04, 0x40,  // max_target_h
    //0x70, 0x05, 0x00,  // max_target_l
    //0x70, 0x06, 0x38,  // min_target_h
    //0x70, 0x07, 0x00,  // min_target_l
    //0x70, 0x08, 0x40,  // bin0_target_h
    //0x70, 0x09, 0x00,  // bin0_target_l
    //0x70, 0x0A, 0x80,  // hist_target_h
    //0x70, 0x0B, 0x00,  // hist_target_l

    0x70, 0x0e, 0x00,  // emwa_alfa_l
    0x70, 0x0f, 0x60,  // emwa_alfa_h

    // shortest targets
    0x70, 0x1a, 0x02,  // max_target_h
    0x70, 0x1b, 0x00,  // max_target_l
    0x70, 0x1c, 0x01,  // min_target_h
    0x70, 0x1d, 0x80,  // min_target_l
    0x70, 0x1e, 0x02,  // bin0_target_h
    0x70, 0x1f, 0x00,  // bin0_target_l
    0x70, 0x20, 0x04,  // hist_target_h
    0x70, 0x21, 0x00,  // hist_target_l
    0x70, 0x24, 0x00,  // emwa_alfa_h
    0x70, 0x25, 0x60,  // emwa_alfa_l


    // absolute max long/short = 1024
    0x70, 0xe6, 0x00,  // d_ratio_max_ls_reg_3 
    //0x70, 0xe7, 0x00,  // d_ratio_max_ls_reg_2
    0x70, 0xe7, 0x00,  // d_ratio_max_ls_reg_2 // 0x40 
    //0x70, 0xe4, 0x10,  // d_ratio_max_ls_reg_1 // 0x00
    0x70, 0xe4, 0x04,  // d_ratio_max_ls_reg_1 // 0x00
    0x70, 0xe5, 0x00,  // d_ratio_max_ls_reg_0 

    // absolute min long/short = 16
    0x70, 0xea, 0x00,  // d_ratio_min_ls_reg_3 
    0x70, 0xeb, 0x00,  // d_ratio_min_ls_reg_2 
    0x70, 0xe8, 0x01,  // d_ratio_min_ls_reg_1 // 0x40?
    0x70, 0xe9, 0x00,  // d_ratio_min_ls_reg_0 

    // absolute max long/very short = 1024
    0x70, 0xee, 0x00,  // d_ratio_max_ls_reg_3
    0x70, 0xef, 0x00,  // d_ratio_max_ls_reg_2
    //0x70, 0xec, 0xfd,  // d_ratio_max_ls_reg_1 // .. 0xfd=253*256 =64K
    0x70, 0xec, 0x04,  // d_ratio_max_ls_reg_1 // 0x00
    0x70, 0xed, 0x00,  // d_ratio_max_ls_reg_0

    // absolute min long/very short = 16
    0x70, 0xf2, 0x00,  // d_ratio_min_ls_reg_3
    0x70, 0xf3, 0x00,  // d_ratio_min_ls_reg_2
    0x70, 0xf0, 0x00,  // d_ratio_min_ls_reg_1
    0x70, 0xf1, 0x10,  // d_ratio_min_ls_reg_0

#endif // not defined AEC_OLD

    // PD ratio 6.5
    0x30, 0xFB, 0x06,  // pdratio_h
    0x30, 0xFC, 0x80,  // pdratio_l 
    // CG ratio 2.45 (2+147/256)
    0x30, 0xFD, 0x02,  // cgratio_h
    0x30, 0xFE, 0x93,  // cgratio_l

    //0x31, 0x27, 0xfb,  // enable ISP
    //0x31, 0x27, 0x63,  // enable ISP, wb_gain_en dead pixel
    //0x31, 0x27, 0x43,  // enable ISP, wb_gain_en 
    //0x31, 0x27, 0x03,  // enable ISP, wb_gain_en 
    0x31, 0x27, 0x23,  // enable ISP, wb_gain_en, dead pixel
    // 0 isp en
    // 1 wb en
    // 2 vignetting en
    // 3 hdr dns (denoise)
    // 4 simple interpoaltion en (dead pixel)
    // 5 dead pixel en
    // 6 cropping en

    //0x30, 0xfa, 0x06,  // enable ISP
    0x30, 0xfa, 0x40 | GRGB_MASK,  // enable AEC
    // 7 0=ISP input 1=DNS output
    // 6 AEC enable
    // 5 1= compute but don't apply EV 
    // 4 HDR stats
    // 3-0 channel select
    
                                   
  }; //AEC_ON

#endif //#ifndef __KERNEL__

#define RGAIN 400
#define BGAIN 400
//#define RGAIN 256
//#define BGAIN 256

static uint8_t OV10640_default_WB[] =
  {

    0x31, 0xC3, (RGAIN>>8 & 0xff),   // Long Exposure R Gain H
    0x31, 0xC4, (RGAIN & 0xff),
    0x31, 0xC9, (BGAIN>>8 & 0xff),   // Long Exposure B Gain H
    0x31, 0xCA, (BGAIN & 0xff),
    0x31, 0xCB, (RGAIN>>8 & 0xff),   // Short Exposure R Gain H
    0x31, 0xCC, (RGAIN & 0xff),
    0x31, 0xD1, (BGAIN>>8 & 0xff),   // Short Exposure B Gain H
    0x31, 0xD2, (BGAIN & 0xff),
    0x31, 0xD3, (RGAIN>>8 & 0xff),   // Very Short Exposure R Gain H
    0x31, 0xD4, (RGAIN & 0xff),
    0x31, 0xD9, (BGAIN>>8 & 0xff),   // Very Short Exposure B Gain H
    0x31, 0xDA, (BGAIN & 0xff)

  };
  
#endif /* OV10640CONFIG3_H */
