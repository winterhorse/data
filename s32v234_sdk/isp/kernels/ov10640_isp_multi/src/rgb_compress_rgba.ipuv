	# for IPUV
	# input shift: 4
	# x-counter shift: 4
	# out counter shift 3 (x4)
# function:
# compress RGB according to the compression factor
# in0  :  R
# in1  :  G
# in2  :  B
# in3  :  comression factor in (8.8)
# out0 :  B compressed
# out1 :  G compressed
# out2 :  R compressed

        
.global rgb_compress_rgba_start
rgb_compress_rgba_start:
  mov confalu,(0 /*unsigned*/ | (1<<1) /*saturate*/ | (8<<4) /*shr*/)

  mov  gpr0, 0xffff

  done rgb_compress_rgba_loop,i

rgb_compress_rgba_loop:	

  mov  vh4, gpr0	// A
  mulh vh9 ,vh10,vh15	// B
  mulh vh14,vh5, vh15	// G
  mulh vh19,vh0, vh15	// R

rgb_compress_rgba_out0:	
	dvot vv7,rgb_compress_rgba_out1,o
rgb_compress_rgba_out1:	
	dvot vv6,rgb_compress_rgba_out2,o
rgb_compress_rgba_out2:	
	dvot vv5,rgb_compress_rgba_out3,o
rgb_compress_rgba_out3:	
	dvot vv4,rgb_compress_rgba_loop,ixo
	

  //halt
.global rgb_compress_rgba_end
rgb_compress_rgba_end:
