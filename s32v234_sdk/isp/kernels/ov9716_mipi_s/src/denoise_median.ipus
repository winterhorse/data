# IPUS
# Function:
# compute low pass filtered by median from 8 neighbors (mean of both middle)
# if absolute difference between low pass filtered and input is greater
# than threshold, then use input, else use low pass filtered
# Channels:
# set shift_in/x/out to 1 pixels
# in0  :  Y
# in1  :  Y
# in2  :  Y
# out0 :  Y denoised / or original

# Parameters:
# GPR7       threshold
# GPR12      0: mark edge pixels black 0xffff: normal mode.
# GPR13      maximum ypos
# Variables:
# GPR8       absdiff(low_pass_filtered - input)
# GPR10      low pass filtered signal
# GPR14      # of pixels above threshold of current frame
# GPR15      # of pixels above threshold of last frame

.global denoise_median_start
denoise_median_start:
        sub zero,ypos,zero     // check for frame start
	beq denoise_median_framestart  // init counter

denoise_median_continue:
        mov confalu,(0 /*unsigned*/ | (1<<1) /*saturate*/ | (4<<4) /*shr*/)
        mov confsort,(1 /*ina*/ | (0<<2) /*use mask*/ | (0<<3) /*unsigned*/)
	max gpr13,gpr13,ypos

        done denoise_median_d1,i
denoise_median_d1:
        mov maskv,0x1ef        // 0b111 101 111
        done denoise_median_d2,i
denoise_median_d2:
        done denoise_median_loop,i
denoise_median_loop:

        // compare difference with threshold
	//and gpr9,ina4,gpr12  // to view edge pixels
	mov gpr10,median
        abd gpr8,gpr10,ina4

	done denoise_median_check_thr,i  // to reduce stalls
denoise_median_check_thr:
        sub gpr8,gpr8,gpr7
	// nop  //stall before branch

	// select filtered if lower than threshold
	and gpr9,ina5,gpr12  // to view edge pixels
        bcc denoise_median_above_thr    // carry cleared
        dout gpr10,denoise_median_loop,xo

denoise_median_above_thr:
	// keep input signal when higher than threshold
	add gpr14,1
	dout gpr9,denoise_median_loop,xo
	//dout ina5,denoise_median_loop,xo

denoise_median_framestart:
	mov gpr15,gpr14
	mov gpr14,zero
	bal denoise_median_continue

        //halt
.global denoise_median_end
denoise_median_end:
